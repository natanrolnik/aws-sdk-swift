//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS SESv2 service.
///
/// Amazon SES API v2  Amazon SES is an Amazon Web Services service that you can use to send email messages to your customers. If you're new to Amazon SES API v2, you might find it helpful to review the Amazon Simple Email Service Developer Guide. The Amazon SES Developer Guide provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.
public struct SESv2: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SESv2 client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "SESv2",
            serviceIdentifier: "email",
            signingName: "ses",
            serviceProtocol: .restjson,
            apiVersion: "2019-09-27",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: SESv2ErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ca-central-1": "email-fips.ca-central-1.amazonaws.com",
            "us-east-1": "email-fips.us-east-1.amazonaws.com",
            "us-east-2": "email-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "email-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "email-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "email-fips.us-west-1.amazonaws.com",
            "us-west-2": "email-fips.us-west-2.amazonaws.com"
        ])
    ]}

    /// Composes an email message to multiple destinations.
    @Sendable
    @inlinable
    public func sendBulkEmail(_ input: SendBulkEmailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendBulkEmailResponse {
        try await self.client.execute(
            operation: "SendBulkEmail", 
            path: "/v2/email/outbound-bulk-emails", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Composes an email message to multiple destinations.
    ///
    /// Parameters:
    ///   - bulkEmailEntries: The list of bulk email entry objects.
    ///   - configurationSetName: The name of the configuration set to use when sending the email.
    ///   - defaultContent: An object that contains the body of the message. You can specify a template message.
    ///   - defaultEmailTags: A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    ///   - endpointId: The ID of the multi-region endpoint (global-endpoint).
    ///   - feedbackForwardingEmailAddress: The address that you want bounce and complaint notifications to be sent to.
    ///   - feedbackForwardingEmailAddressIdentityArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FeedbackForwardingEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the FeedbackForwardingEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FeedbackForwardingEmailAddress to be feedback@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - fromEmailAddress: The email address to use as the "From" address for the email. The address that you specify has to be verified.
    ///   - fromEmailAddressIdentityArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FromEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the FromEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FromEmailAddress to be sender@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - replyToAddresses: The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendBulkEmail(
        bulkEmailEntries: [BulkEmailEntry],
        configurationSetName: String? = nil,
        defaultContent: BulkEmailContent,
        defaultEmailTags: [MessageTag]? = nil,
        endpointId: String? = nil,
        feedbackForwardingEmailAddress: String? = nil,
        feedbackForwardingEmailAddressIdentityArn: String? = nil,
        fromEmailAddress: String? = nil,
        fromEmailAddressIdentityArn: String? = nil,
        replyToAddresses: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendBulkEmailResponse {
        let input = SendBulkEmailRequest(
            bulkEmailEntries: bulkEmailEntries, 
            configurationSetName: configurationSetName, 
            defaultContent: defaultContent, 
            defaultEmailTags: defaultEmailTags, 
            endpointId: endpointId, 
            feedbackForwardingEmailAddress: feedbackForwardingEmailAddress, 
            feedbackForwardingEmailAddressIdentityArn: feedbackForwardingEmailAddressIdentityArn, 
            fromEmailAddress: fromEmailAddress, 
            fromEmailAddressIdentityArn: fromEmailAddressIdentityArn, 
            replyToAddresses: replyToAddresses
        )
        return try await self.sendBulkEmail(input, logger: logger)
    }

    /// Sends an email message. You can use the Amazon SES API v2 to send the following types of messages:    Simple – A standard email message. When you create this type of message, you specify the sender, the recipient, and the message body, and Amazon SES assembles the message for you.    Raw – A raw, MIME-formatted email message. When you send this type of email, you have to specify all of the message headers, as well as the message body. You can use this message type to send messages that contain attachments. The message that you specify has to be a valid MIME message.    Templated – A message that contains personalization tags. When you send this type of email, Amazon SES API v2 automatically replaces the tags with values that you specify.
    @Sendable
    @inlinable
    public func sendEmail(_ input: SendEmailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendEmailResponse {
        try await self.client.execute(
            operation: "SendEmail", 
            path: "/v2/email/outbound-emails", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sends an email message. You can use the Amazon SES API v2 to send the following types of messages:    Simple – A standard email message. When you create this type of message, you specify the sender, the recipient, and the message body, and Amazon SES assembles the message for you.    Raw – A raw, MIME-formatted email message. When you send this type of email, you have to specify all of the message headers, as well as the message body. You can use this message type to send messages that contain attachments. The message that you specify has to be a valid MIME message.    Templated – A message that contains personalization tags. When you send this type of email, Amazon SES API v2 automatically replaces the tags with values that you specify.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set to use when sending the email.
    ///   - content: An object that contains the body of the message. You can send either a Simple message, Raw message, or a Templated message.
    ///   - destination: An object that contains the recipients of the email message.
    ///   - emailTags: A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    ///   - endpointId: The ID of the multi-region endpoint (global-endpoint).
    ///   - feedbackForwardingEmailAddress: The address that you want bounce and complaint notifications to be sent to.
    ///   - feedbackForwardingEmailAddressIdentityArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FeedbackForwardingEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the FeedbackForwardingEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FeedbackForwardingEmailAddress to be feedback@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - fromEmailAddress: The email address to use as the "From" address for the email. The address that you specify has to be verified.
    ///   - fromEmailAddressIdentityArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the FromEmailAddress parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the FromEmailAddressIdentityArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the FromEmailAddress to be sender@example.com. For more information about sending authorization, see the Amazon SES Developer Guide. For Raw emails, the FromEmailAddressIdentityArn value overrides the X-SES-SOURCE-ARN and X-SES-FROM-ARN headers specified in raw email message content.
    ///   - listManagementOptions: An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe.
    ///   - replyToAddresses: The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendEmail(
        configurationSetName: String? = nil,
        content: EmailContent,
        destination: Destination? = nil,
        emailTags: [MessageTag]? = nil,
        endpointId: String? = nil,
        feedbackForwardingEmailAddress: String? = nil,
        feedbackForwardingEmailAddressIdentityArn: String? = nil,
        fromEmailAddress: String? = nil,
        fromEmailAddressIdentityArn: String? = nil,
        listManagementOptions: ListManagementOptions? = nil,
        replyToAddresses: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendEmailResponse {
        let input = SendEmailRequest(
            configurationSetName: configurationSetName, 
            content: content, 
            destination: destination, 
            emailTags: emailTags, 
            endpointId: endpointId, 
            feedbackForwardingEmailAddress: feedbackForwardingEmailAddress, 
            feedbackForwardingEmailAddressIdentityArn: feedbackForwardingEmailAddressIdentityArn, 
            fromEmailAddress: fromEmailAddress, 
            fromEmailAddressIdentityArn: fromEmailAddressIdentityArn, 
            listManagementOptions: listManagementOptions, 
            replyToAddresses: replyToAddresses
        )
        return try await self.sendEmail(input, logger: logger)
    }

    /// Add one or more tags (keys and values) to a specified resource. A tag is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags. Each tag consists of a required tag key and an associated tag value, both of which you define. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/v2/email/tags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Add one or more tags (keys and values) to a specified resource. A tag is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags. Each tag consists of a required tag key and an associated tag value, both of which you define. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.
    ///   - tags: A list of the tags that you want to add to the resource. A tag consists of a required tag key (Key) and an associated tag value (Value). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }
}

extension SESv2 {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SESv2, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
