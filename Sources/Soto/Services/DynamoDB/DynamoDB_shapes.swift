//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension DynamoDB {
    // MARK: Enums

    public enum ApproximateCreationDateTimePrecision: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case microsecond = "MICROSECOND"
        case millisecond = "MILLISECOND"
        public var description: String { return self.rawValue }
    }

    public enum AttributeAction: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case add = "ADD"
        case delete = "DELETE"
        case put = "PUT"
        public var description: String { return self.rawValue }
    }

    public enum BatchStatementErrorCodeEnum: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accessDenied = "AccessDenied"
        case conditionalCheckFailed = "ConditionalCheckFailed"
        case duplicateItem = "DuplicateItem"
        case internalServerError = "InternalServerError"
        case itemCollectionSizeLimitExceeded = "ItemCollectionSizeLimitExceeded"
        case provisionedThroughputExceeded = "ProvisionedThroughputExceeded"
        case requestLimitExceeded = "RequestLimitExceeded"
        case resourceNotFound = "ResourceNotFound"
        case throttlingError = "ThrottlingError"
        case transactionConflict = "TransactionConflict"
        case validationError = "ValidationError"
        public var description: String { return self.rawValue }
    }

    public enum BillingMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case payPerRequest = "PAY_PER_REQUEST"
        case provisioned = "PROVISIONED"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `in` = "IN"
        case beginsWith = "BEGINS_WITH"
        case between = "BETWEEN"
        case contains = "CONTAINS"
        case eq = "EQ"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case ne = "NE"
        case notContains = "NOT_CONTAINS"
        case notNull = "NOT_NULL"
        case null = "NULL"
        public var description: String { return self.rawValue }
    }

    public enum ConditionalOperator: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case and = "AND"
        case or = "OR"
        public var description: String { return self.rawValue }
    }

    public enum ContributorInsightsAction: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "DISABLE"
        case enable = "ENABLE"
        public var description: String { return self.rawValue }
    }

    public enum ContributorInsightsStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        case enabled = "ENABLED"
        case enabling = "ENABLING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum DestinationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        case enableFailed = "ENABLE_FAILED"
        case enabling = "ENABLING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum ExportFormat: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case dynamodbJson = "DYNAMODB_JSON"
        case ion = "ION"
        public var description: String { return self.rawValue }
    }

    public enum ExportStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum ExportType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fullExport = "FULL_EXPORT"
        case incrementalExport = "INCREMENTAL_EXPORT"
        public var description: String { return self.rawValue }
    }

    public enum ExportViewType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case newAndOldImages = "NEW_AND_OLD_IMAGES"
        case newImage = "NEW_IMAGE"
        public var description: String { return self.rawValue }
    }

    public enum GlobalTableStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleting = "DELETING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum ImportStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cancelled = "CANCELLED"
        case cancelling = "CANCELLING"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum IndexStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleting = "DELETING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum InputCompressionType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gzip = "GZIP"
        case none = "NONE"
        case zstd = "ZSTD"
        public var description: String { return self.rawValue }
    }

    public enum InputFormat: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case csv = "CSV"
        case dynamodbJson = "DYNAMODB_JSON"
        case ion = "ION"
        public var description: String { return self.rawValue }
    }

    public enum KeyType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hash = "HASH"
        case range = "RANGE"
        public var description: String { return self.rawValue }
    }

    public enum MultiRegionConsistency: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case eventual = "EVENTUAL"
        case strong = "STRONG"
        public var description: String { return self.rawValue }
    }

    public enum PointInTimeRecoveryStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum ProjectionType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "ALL"
        case include = "INCLUDE"
        case keysOnly = "KEYS_ONLY"
        public var description: String { return self.rawValue }
    }

    public enum ReplicaStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case creationFailed = "CREATION_FAILED"
        case deleting = "DELETING"
        case inaccessibleEncryptionCredentials = "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
        case regionDisabled = "REGION_DISABLED"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum ReturnConsumedCapacity: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case indexes = "INDEXES"
        case none = "NONE"
        case total = "TOTAL"
        public var description: String { return self.rawValue }
    }

    public enum ReturnItemCollectionMetrics: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case none = "NONE"
        case size = "SIZE"
        public var description: String { return self.rawValue }
    }

    public enum ReturnValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case allNew = "ALL_NEW"
        case allOld = "ALL_OLD"
        case none = "NONE"
        case updatedNew = "UPDATED_NEW"
        case updatedOld = "UPDATED_OLD"
        public var description: String { return self.rawValue }
    }

    public enum ReturnValuesOnConditionCheckFailure: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case allOld = "ALL_OLD"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum S3SseAlgorithm: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case aes256 = "AES256"
        case kms = "KMS"
        public var description: String { return self.rawValue }
    }

    public enum SSEStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        case enabled = "ENABLED"
        case enabling = "ENABLING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum SSEType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case aes256 = "AES256"
        case kms = "KMS"
        public var description: String { return self.rawValue }
    }

    public enum ScalarAttributeType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case b = "B"
        case n = "N"
        case s = "S"
        public var description: String { return self.rawValue }
    }

    public enum Select: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case allAttributes = "ALL_ATTRIBUTES"
        case allProjectedAttributes = "ALL_PROJECTED_ATTRIBUTES"
        case count = "COUNT"
        case specificAttributes = "SPECIFIC_ATTRIBUTES"
        public var description: String { return self.rawValue }
    }

    public enum StreamViewType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case keysOnly = "KEYS_ONLY"
        case newAndOldImages = "NEW_AND_OLD_IMAGES"
        case newImage = "NEW_IMAGE"
        case oldImage = "OLD_IMAGE"
        public var description: String { return self.rawValue }
    }

    public enum TableClass: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case standard = "STANDARD"
        case standardInfrequentAccess = "STANDARD_INFREQUENT_ACCESS"
        public var description: String { return self.rawValue }
    }

    public enum TableStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case archived = "ARCHIVED"
        case archiving = "ARCHIVING"
        case creating = "CREATING"
        case deleting = "DELETING"
        case inaccessibleEncryptionCredentials = "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum TimeToLiveStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        case enabled = "ENABLED"
        case enabling = "ENABLING"
        public var description: String { return self.rawValue }
    }

    public enum AttributeValue: AWSEncodableShape & AWSDecodableShape, Sendable {
        /// An attribute of type Binary. For example:  "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"
        case b(AWSBase64Data)
        /// An attribute of type Boolean. For example:  "BOOL": true
        case bool(Bool)
        /// An attribute of type Binary Set. For example:  "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
        case bs([AWSBase64Data])
        /// An attribute of type List. For example:  "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N": "3.14159"}]
        case l([AttributeValue])
        /// An attribute of type Map. For example:  "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
        case m([String: AttributeValue])
        /// An attribute of type Number. For example:  "N": "123.45"  Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.
        case n(String)
        /// An attribute of type Number Set. For example:  "NS": ["42.2", "-19", "7.5", "3.14"]  Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.
        case ns([String])
        /// An attribute of type Null. For example:  "NULL": true
        case null(Bool)
        /// An attribute of type String. For example:  "S": "Hello"
        case s(String)
        /// An attribute of type String Set. For example:  "SS": ["Giraffe", "Hippo" ,"Zebra"]
        case ss([String])

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            guard container.allKeys.count == 1, let key = container.allKeys.first else {
                let context = DecodingError.Context(
                    codingPath: container.codingPath,
                    debugDescription: "Expected exactly one key, but got \(container.allKeys.count)"
                )
                throw DecodingError.dataCorrupted(context)
            }
            switch key {
            case .b:
                let value = try container.decode(AWSBase64Data.self, forKey: .b)
                self = .b(value)
            case .bool:
                let value = try container.decode(Bool.self, forKey: .bool)
                self = .bool(value)
            case .bs:
                let value = try container.decode([AWSBase64Data].self, forKey: .bs)
                self = .bs(value)
            case .l:
                let value = try container.decode([AttributeValue].self, forKey: .l)
                self = .l(value)
            case .m:
                let value = try container.decode([String: AttributeValue].self, forKey: .m)
                self = .m(value)
            case .n:
                let value = try container.decode(String.self, forKey: .n)
                self = .n(value)
            case .ns:
                let value = try container.decode([String].self, forKey: .ns)
                self = .ns(value)
            case .null:
                let value = try container.decode(Bool.self, forKey: .null)
                self = .null(value)
            case .s:
                let value = try container.decode(String.self, forKey: .s)
                self = .s(value)
            case .ss:
                let value = try container.decode([String].self, forKey: .ss)
                self = .ss(value)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .b(let value):
                try container.encode(value, forKey: .b)
            case .bool(let value):
                try container.encode(value, forKey: .bool)
            case .bs(let value):
                try container.encode(value, forKey: .bs)
            case .l(let value):
                try container.encode(value, forKey: .l)
            case .m(let value):
                try container.encode(value, forKey: .m)
            case .n(let value):
                try container.encode(value, forKey: .n)
            case .ns(let value):
                try container.encode(value, forKey: .ns)
            case .null(let value):
                try container.encode(value, forKey: .null)
            case .s(let value):
                try container.encode(value, forKey: .s)
            case .ss(let value):
                try container.encode(value, forKey: .ss)
            }
        }

        public func validate(name: String) throws {
            switch self {
            case .l(let value):
                try value.forEach {
                    try $0.validate(name: "\(name).l[]")
                }
            case .m(let value):
                try value.forEach {
                    try validate($0.key, name: "m.key", parent: name, max: 65535)
                    try $0.value.validate(name: "\(name).m[\"\($0.key)\"]")
                }
            default:
                break
            }
        }

        private enum CodingKeys: String, CodingKey {
            case b = "B"
            case bool = "BOOL"
            case bs = "BS"
            case l = "L"
            case m = "M"
            case n = "N"
            case ns = "NS"
            case null = "NULL"
            case s = "S"
            case ss = "SS"
        }
    }

    public enum TransactWriteItem: AWSEncodableShape, Sendable {
        /// A request to perform a check item operation.
        case conditionCheck(ConditionCheck)
        /// A request to perform a DeleteItem operation.
        case delete(Delete)
        /// A request to perform a PutItem operation.
        case put(Put)
        /// A request to perform an UpdateItem operation.
        case update(Update)

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .conditionCheck(let value):
                try container.encode(value, forKey: .conditionCheck)
            case .delete(let value):
                try container.encode(value, forKey: .delete)
            case .put(let value):
                try container.encode(value, forKey: .put)
            case .update(let value):
                try container.encode(value, forKey: .update)
            }
        }

        public func validate(name: String) throws {
            switch self {
            case .conditionCheck(let value):
                try value.validate(name: "\(name).conditionCheck")
            case .delete(let value):
                try value.validate(name: "\(name).delete")
            case .put(let value):
                try value.validate(name: "\(name).put")
            case .update(let value):
                try value.validate(name: "\(name).update")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case conditionCheck = "ConditionCheck"
            case delete = "Delete"
            case put = "Put"
            case update = "Update"
        }
    }

    // MARK: Shapes

    public struct ArchivalSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.
        public let archivalBackupArn: String?
        /// The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.
        public let archivalDateTime: Date?
        /// The reason DynamoDB archived the table. Currently, the only possible value is:    INACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table's KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.
        public let archivalReason: String?

        @inlinable
        public init(archivalBackupArn: String? = nil, archivalDateTime: Date? = nil, archivalReason: String? = nil) {
            self.archivalBackupArn = archivalBackupArn
            self.archivalDateTime = archivalDateTime
            self.archivalReason = archivalReason
        }

        private enum CodingKeys: String, CodingKey {
            case archivalBackupArn = "ArchivalBackupArn"
            case archivalDateTime = "ArchivalDateTime"
            case archivalReason = "ArchivalReason"
        }
    }

    public struct AttributeDefinition: AWSEncodableShape & AWSDecodableShape {
        /// A name for the attribute.
        public let attributeName: String
        /// The data type for the attribute, where:    S - the attribute is of type String    N - the attribute is of type Number    B - the attribute is of type Binary
        public let attributeType: ScalarAttributeType

        @inlinable
        public init(attributeName: String, attributeType: ScalarAttributeType) {
            self.attributeName = attributeName
            self.attributeType = attributeType
        }

        public func validate(name: String) throws {
            try self.validate(self.attributeName, name: "attributeName", parent: name, max: 255)
            try self.validate(self.attributeName, name: "attributeName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeType = "AttributeType"
        }
    }

    public struct AttributeValueUpdate: AWSEncodableShape {
        /// Specifies how to perform the update. Valid values are PUT (default), DELETE, and ADD. The behavior depends on whether the specified primary key already exists in the table.  If an item with the specified Key is found in the table:     PUT - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value.     DELETE - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specified [a,c], then the final attribute value would be [b]. Specifying an empty set is an error.    ADD - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:   If the existing attribute is a number, and if Value is also a number, then the Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute.  If you use ADD to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. In addition, if you use ADD to update an existing item, and intend to increment or decrement an attribute value which does not yet exist, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update does not yet have an attribute named itemcount, but you decide to ADD the number 3 to this attribute anyway, even though it currently does not exist. DynamoDB will create the itemcount attribute, set its initial value to 0, and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3.    If the existing data type is a set, and if the Value is also a set, then the Value is added to the existing set. (This is a set operation, not mathematical addition.) For example, if the attribute value was the set [1,2], and the ADD action specified [3], then the final attribute value would be [1,2,3]. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type.  Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings. The same holds true for number sets and binary sets.   This action is only valid for an existing attribute whose data type is number or is a set. Do not use ADD for any other data types.    If no item with the specified Key is found:     PUT - DynamoDB creates a new item with the specified primary key, and then adds the attribute.     DELETE - Nothing happens; there is no attribute to delete.    ADD - DynamoDB creates a new item with the supplied primary key and number (or set) for the attribute value. The only data types allowed are number, number set, string set or binary set.
        public let action: AttributeAction?
        /// Represents the data for an attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see Data Types in the Amazon DynamoDB Developer Guide.
        public let value: AttributeValue?

        @inlinable
        public init(action: AttributeAction? = nil, value: AttributeValue? = nil) {
            self.action = action
            self.value = value
        }

        public func validate(name: String) throws {
            try self.value?.validate(name: "\(name).value")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case value = "Value"
        }
    }

    public struct BatchExecuteStatementInput: AWSEncodableShape {
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// The list of PartiQL statements representing the batch to run.
        public let statements: [BatchStatementRequest]

        @inlinable
        public init(returnConsumedCapacity: ReturnConsumedCapacity? = nil, statements: [BatchStatementRequest]) {
            self.returnConsumedCapacity = returnConsumedCapacity
            self.statements = statements
        }

        public func validate(name: String) throws {
            try self.statements.forEach {
                try $0.validate(name: "\(name).statements[]")
            }
            try self.validate(self.statements, name: "statements", parent: name, max: 25)
            try self.validate(self.statements, name: "statements", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case statements = "Statements"
        }
    }

    public struct BatchExecuteStatementOutput: AWSDecodableShape {
        /// The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.
        public let consumedCapacity: [ConsumedCapacity]?
        /// The response to each PartiQL statement in the batch. The values of the list are ordered according to the ordering of the request statements.
        public let responses: [BatchStatementResponse]?

        @inlinable
        public init(consumedCapacity: [ConsumedCapacity]? = nil, responses: [BatchStatementResponse]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case responses = "Responses"
        }
    }

    public struct BatchGetItemInput: AWSEncodableShape {
        /// A map of one or more table names or table ARNs and, for each table, a map that describes one or more items to retrieve from that table. Each table name or ARN can be used only once per BatchGetItem request. Each element in the map of items to retrieve consists of the following:    ConsistentRead - If true, a strongly consistent read is used; if false (the default), an eventually consistent read is used.    ExpressionAttributeNames - One or more substitution tokens for attribute names in the ProjectionExpression parameter. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information about expression attribute names, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.    Keys - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide both the partition key value and the sort key value.    ProjectionExpression - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.    AttributesToGet - This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide.
        public let requestItems: [String: KeysAndAttributes]
        public let returnConsumedCapacity: ReturnConsumedCapacity?

        @inlinable
        public init(requestItems: [String: KeysAndAttributes], returnConsumedCapacity: ReturnConsumedCapacity? = nil) {
            self.requestItems = requestItems
            self.returnConsumedCapacity = returnConsumedCapacity
        }

        public func validate(name: String) throws {
            try self.requestItems.forEach {
                try validate($0.key, name: "requestItems.key", parent: name, max: 1024)
                try validate($0.key, name: "requestItems.key", parent: name, min: 1)
                try $0.value.validate(name: "\(name).requestItems[\"\($0.key)\"]")
            }
            try self.validate(self.requestItems, name: "requestItems", parent: name, max: 100)
            try self.validate(self.requestItems, name: "requestItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case requestItems = "RequestItems"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
        }
    }

    public struct BatchGetItemOutput: AWSDecodableShape {
        /// The read capacity units consumed by the entire BatchGetItem operation. Each element consists of:    TableName - The table that consumed the provisioned throughput.    CapacityUnits - The total number of capacity units consumed.
        public let consumedCapacity: [ConsumedCapacity]?
        /// A map of table name or table ARN to a list of items. Each object in Responses consists of a table name or ARN, along with a map of attribute data consisting of the data type and attribute value.
        public let responses: [String: [[String: AttributeValue]]]?
        /// A map of tables and their respective keys that were not processed with the current response. The UnprocessedKeys value is in the same form as RequestItems, so the value can be provided directly to a subsequent BatchGetItem operation. For more information, see RequestItems in the Request Parameters section. Each element consists of:    Keys - An array of primary key attribute values that define specific items in the table.    ProjectionExpression - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.    ConsistentRead - The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.   If there are no unprocessed keys remaining, the response contains an empty UnprocessedKeys map.
        public let unprocessedKeys: [String: KeysAndAttributes]?

        @inlinable
        public init(consumedCapacity: [ConsumedCapacity]? = nil, responses: [String: [[String: AttributeValue]]]? = nil, unprocessedKeys: [String: KeysAndAttributes]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.responses = responses
            self.unprocessedKeys = unprocessedKeys
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case responses = "Responses"
            case unprocessedKeys = "UnprocessedKeys"
        }
    }

    public struct BatchStatementError: AWSDecodableShape {
        ///  The error code associated with the failed PartiQL batch statement.
        public let code: BatchStatementErrorCodeEnum?
        /// The item which caused the condition check to fail. This will be set if ReturnValuesOnConditionCheckFailure is specified as ALL_OLD.
        public let item: [String: AttributeValue]?
        ///  The error message associated with the PartiQL batch response.
        public let message: String?

        @inlinable
        public init(code: BatchStatementErrorCodeEnum? = nil, item: [String: AttributeValue]? = nil, message: String? = nil) {
            self.code = code
            self.item = item
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case item = "Item"
            case message = "Message"
        }
    }

    public struct BatchStatementRequest: AWSEncodableShape {
        ///  The read consistency of the PartiQL batch request.
        public let consistentRead: Bool?
        ///  The parameters associated with a PartiQL statement in the batch request.
        public let parameters: [AttributeValue]?
        /// An optional parameter that returns the item attributes for a PartiQL batch request operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        ///  A valid PartiQL statement.
        public let statement: String

        @inlinable
        public init(consistentRead: Bool? = nil, parameters: [AttributeValue]? = nil, returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, statement: String) {
            self.consistentRead = consistentRead
            self.parameters = parameters
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.statement = statement
        }

        public func validate(name: String) throws {
            try self.parameters?.forEach {
                try $0.validate(name: "\(name).parameters[]")
            }
            try self.validate(self.parameters, name: "parameters", parent: name, min: 1)
            try self.validate(self.statement, name: "statement", parent: name, max: 8192)
            try self.validate(self.statement, name: "statement", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case consistentRead = "ConsistentRead"
            case parameters = "Parameters"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case statement = "Statement"
        }
    }

    public struct BatchStatementResponse: AWSDecodableShape {
        ///  The error associated with a failed PartiQL batch statement.
        public let error: BatchStatementError?
        ///  A DynamoDB item associated with a BatchStatementResponse
        public let item: [String: AttributeValue]?
        ///  The table name associated with a failed PartiQL batch statement.
        public let tableName: String?

        @inlinable
        public init(error: BatchStatementError? = nil, item: [String: AttributeValue]? = nil, tableName: String? = nil) {
            self.error = error
            self.item = item
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case error = "Error"
            case item = "Item"
            case tableName = "TableName"
        }
    }

    public struct BatchWriteItemInput: AWSEncodableShape {
        /// A map of one or more table names or table ARNs and, for each table, a list of operations to be performed (DeleteRequest or PutRequest). Each element in the map consists of the following:    DeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:    Key - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.      PutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:    Item - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values are rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.
        public let requestItems: [String: [WriteRequest]]
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?

        @inlinable
        public init(requestItems: [String: [WriteRequest]], returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil) {
            self.requestItems = requestItems
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
        }

        public func validate(name: String) throws {
            try self.requestItems.forEach {
                try validate($0.key, name: "requestItems.key", parent: name, max: 1024)
                try validate($0.key, name: "requestItems.key", parent: name, min: 1)
                try validate($0.value, name: "requestItems[\"\($0.key)\"]", parent: name, max: 25)
                try validate($0.value, name: "requestItems[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.validate(self.requestItems, name: "requestItems", parent: name, max: 25)
            try self.validate(self.requestItems, name: "requestItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case requestItems = "RequestItems"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        }
    }

    public struct BatchWriteItemOutput: AWSDecodableShape {
        /// The capacity units consumed by the entire BatchWriteItem operation. Each element consists of:    TableName - The table that consumed the provisioned throughput.    CapacityUnits - The total number of capacity units consumed.
        public let consumedCapacity: [ConsumedCapacity]?
        /// A list of tables that were processed by BatchWriteItem and, for each table, information about any item collections that were affected by individual DeleteItem or PutItem operations. Each entry consists of the following subelements:    ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item.    SizeEstimateRangeGB - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let itemCollectionMetrics: [String: [ItemCollectionMetrics]]?
        /// A map of tables and requests against those tables that were not processed. The UnprocessedItems value is in the same form as RequestItems, so you can provide this value directly to a subsequent BatchWriteItem operation. For more information, see RequestItems in the Request Parameters section. Each UnprocessedItems entry consists of a table name or table ARN and, for that table, a list of operations to perform (DeleteRequest or PutRequest).    DeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:    Key - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.      PutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:    Item - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.     If there are no unprocessed items remaining, the response contains an empty UnprocessedItems map.
        public let unprocessedItems: [String: [WriteRequest]]?

        @inlinable
        public init(consumedCapacity: [ConsumedCapacity]? = nil, itemCollectionMetrics: [String: [ItemCollectionMetrics]]? = nil, unprocessedItems: [String: [WriteRequest]]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
            self.unprocessedItems = unprocessedItems
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
            case unprocessedItems = "UnprocessedItems"
        }
    }

    public struct BillingModeSummary: AWSDecodableShape {
        /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.    PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.    PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
        public let billingMode: BillingMode?
        /// Represents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.
        public let lastUpdateToPayPerRequestDateTime: Date?

        @inlinable
        public init(billingMode: BillingMode? = nil, lastUpdateToPayPerRequestDateTime: Date? = nil) {
            self.billingMode = billingMode
            self.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case billingMode = "BillingMode"
            case lastUpdateToPayPerRequestDateTime = "LastUpdateToPayPerRequestDateTime"
        }
    }

    public struct Capacity: AWSDecodableShape {
        /// The total number of capacity units consumed on a table or an index.
        public let capacityUnits: Double?
        /// The total number of read capacity units consumed on a table or an index.
        public let readCapacityUnits: Double?
        /// The total number of write capacity units consumed on a table or an index.
        public let writeCapacityUnits: Double?

        @inlinable
        public init(capacityUnits: Double? = nil, readCapacityUnits: Double? = nil, writeCapacityUnits: Double? = nil) {
            self.capacityUnits = capacityUnits
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case capacityUnits = "CapacityUnits"
            case readCapacityUnits = "ReadCapacityUnits"
            case writeCapacityUnits = "WriteCapacityUnits"
        }
    }

    public struct Condition: AWSEncodableShape {
        /// One or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used. For type Number, value comparisons are numeric. String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A, and a is greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters. For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.
        public let attributeValueList: [AttributeValue]?
        /// A comparator for evaluating attributes. For example, equals, greater than, less than, etc. The following comparison operators are available:  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN  The following are descriptions of each comparison operator.    EQ : Equal. EQ is supported for all data types, including lists and maps.  AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.     NE : Not equal. NE is supported for all data types, including lists and maps.  AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.     LE : Less than or equal.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     LT : Less than.   AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     GE : Greater than or equal.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     GT : Greater than.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     NOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.  This operator tests for the existence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NOT_NULL, the result is a Boolean true. This result is because the attribute "a" exists; its data type is not relevant to the NOT_NULL comparison operator.     NULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.  This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NULL, the result is a Boolean false. This is because the attribute "a" exists; its data type is not relevant to the NULL comparison operator.     CONTAINS : Checks for a subsequence, or value in a set.  AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating "a CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set.  AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "a NOT CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.    BEGINS_WITH : Checks for a prefix.   AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).     IN : Checks for matching elements in a list.  AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.    BETWEEN : Greater than or equal to the first value, and less than or equal to the second value.   AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not compare to {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}    For usage examples of AttributeValueList and ComparisonOperator, see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide.
        public let comparisonOperator: ComparisonOperator

        @inlinable
        public init(attributeValueList: [AttributeValue]? = nil, comparisonOperator: ComparisonOperator) {
            self.attributeValueList = attributeValueList
            self.comparisonOperator = comparisonOperator
        }

        public func validate(name: String) throws {
            try self.attributeValueList?.forEach {
                try $0.validate(name: "\(name).attributeValueList[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValueList = "AttributeValueList"
            case comparisonOperator = "ComparisonOperator"
        }
    }

    public struct ConditionCheck: AWSEncodableShape {
        /// A condition that must be satisfied in order for a conditional update to succeed. For more information, see Condition expressions in the Amazon DynamoDB Developer Guide.
        public let conditionExpression: String
        /// One or more substitution tokens for attribute names in an expression. For more information, see Expression attribute names in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. For more information, see Condition expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// The primary key of the item to be checked. Each element consists of an attribute name and a value for that attribute.
        public let key: [String: AttributeValue]
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the ConditionCheck condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// Name of the table for the check item request. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(conditionExpression: String, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String) {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case conditionExpression = "ConditionExpression"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
        }
    }

    public struct ConsumedCapacity: AWSDecodableShape {
        /// The total number of capacity units consumed by the operation.
        public let capacityUnits: Double?
        /// The amount of throughput consumed on each global index affected by the operation.
        public let globalSecondaryIndexes: [String: Capacity]?
        /// The amount of throughput consumed on each local index affected by the operation.
        public let localSecondaryIndexes: [String: Capacity]?
        /// The total number of read capacity units consumed by the operation.
        public let readCapacityUnits: Double?
        /// The amount of throughput consumed on the table affected by the operation.
        public let table: Capacity?
        /// The name of the table that was affected by the operation. If you had specified the Amazon Resource Name (ARN) of a table in the input, you'll see the table ARN in the response.
        public let tableName: String?
        /// The total number of write capacity units consumed by the operation.
        public let writeCapacityUnits: Double?

        @inlinable
        public init(capacityUnits: Double? = nil, globalSecondaryIndexes: [String: Capacity]? = nil, localSecondaryIndexes: [String: Capacity]? = nil, readCapacityUnits: Double? = nil, table: Capacity? = nil, tableName: String? = nil, writeCapacityUnits: Double? = nil) {
            self.capacityUnits = capacityUnits
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.localSecondaryIndexes = localSecondaryIndexes
            self.readCapacityUnits = readCapacityUnits
            self.table = table
            self.tableName = tableName
            self.writeCapacityUnits = writeCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case capacityUnits = "CapacityUnits"
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case localSecondaryIndexes = "LocalSecondaryIndexes"
            case readCapacityUnits = "ReadCapacityUnits"
            case table = "Table"
            case tableName = "TableName"
            case writeCapacityUnits = "WriteCapacityUnits"
        }
    }

    public struct Delete: AWSEncodableShape {
        /// A condition that must be satisfied in order for a conditional delete to succeed.
        public let conditionExpression: String?
        /// One or more substitution tokens for attribute names in an expression.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// The primary key of the item to be deleted. Each element consists of an attribute name and a value for that attribute.
        public let key: [String: AttributeValue]
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Delete condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which the item to be deleted resides. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(conditionExpression: String? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String) {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case conditionExpression = "ConditionExpression"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
        }
    }

    public struct DeleteGlobalSecondaryIndexAction: AWSEncodableShape {
        /// The name of the global secondary index to be deleted.
        public let indexName: String

        @inlinable
        public init(indexName: String) {
            self.indexName = indexName
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
        }
    }

    public struct DeleteItemInput: AWSEncodableShape {
        /// This is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// A condition that must be satisfied in order for a conditional DeleteItem to succeed. An expression can contain any of the following:   Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size  These function names are case-sensitive.   Comparison operators: = | <> | | = | BETWEEN | IN     Logical operators: AND | OR | NOT    For more information about condition expressions, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let conditionExpression: String?
        /// This is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide.
        public let expected: [String: ExpectedAttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A map of attribute names to AttributeValue objects, representing the primary key of the item to delete. For the primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
        public let key: [String: AttributeValue]
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
        /// Use ReturnValues if you want to get the item attributes as they appeared before they were deleted. For DeleteItem, the valid values are:    NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)    ALL_OLD - The content of the old item is returned.   There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.  The ReturnValues parameter is used by several DynamoDB operations; however, DeleteItem does not recognize any values other than NONE or ALL_OLD.
        public let returnValues: ReturnValue?
        /// An optional parameter that returns the item attributes for a DeleteItem operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// The name of the table from which to delete the item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(conditionalOperator: ConditionalOperator? = nil, conditionExpression: String? = nil, expected: [String: ExpectedAttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil, returnValues: ReturnValue? = nil, returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String) {
            self.conditionalOperator = conditionalOperator
            self.conditionExpression = conditionExpression
            self.expected = expected
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
            self.returnValues = returnValues
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expected?.forEach {
                try validate($0.key, name: "expected.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).expected[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case conditionalOperator = "ConditionalOperator"
            case conditionExpression = "ConditionExpression"
            case expected = "Expected"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
            case returnValues = "ReturnValues"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
        }
    }

    public struct DeleteItemOutput: AWSDecodableShape {
        /// A map of attribute names to AttributeValue objects, representing the item as it appeared before the DeleteItem operation. This map appears in the response only if ReturnValues was specified as ALL_OLD in the request.
        public let attributes: [String: AttributeValue]?
        /// The capacity units consumed by the DeleteItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned capacity mode in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// Information about item collections, if any, that were affected by the DeleteItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:    ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.    SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let itemCollectionMetrics: ItemCollectionMetrics?

        @inlinable
        public init(attributes: [String: AttributeValue]? = nil, consumedCapacity: ConsumedCapacity? = nil, itemCollectionMetrics: ItemCollectionMetrics? = nil) {
            self.attributes = attributes
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
        }
    }

    public struct DeleteRequest: AWSEncodableShape & AWSDecodableShape {
        /// A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.
        public let key: [String: AttributeValue]

        @inlinable
        public init(key: [String: AttributeValue]) {
            self.key = key
        }

        public func validate(name: String) throws {
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
        }
    }

    public struct DescribeEndpointsRequest: AWSEncodableShape {
        public init() {}
    }

    public struct DescribeEndpointsResponse: AWSDecodableShape {
        /// List of endpoints.
        public let endpoints: [Endpoint]

        @inlinable
        public init(endpoints: [Endpoint]) {
            self.endpoints = endpoints
        }

        private enum CodingKeys: String, CodingKey {
            case endpoints = "Endpoints"
        }
    }

    public struct DescribeTimeToLiveInput: AWSEncodableShape {
        /// The name of the table to be described. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(tableName: String) {
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    public struct DescribeTimeToLiveOutput: AWSDecodableShape {
        public let timeToLiveDescription: TimeToLiveDescription?

        @inlinable
        public init(timeToLiveDescription: TimeToLiveDescription? = nil) {
            self.timeToLiveDescription = timeToLiveDescription
        }

        private enum CodingKeys: String, CodingKey {
            case timeToLiveDescription = "TimeToLiveDescription"
        }
    }

    public struct Endpoint: AWSDecodableShape {
        /// IP address of the endpoint.
        public let address: String
        /// Endpoint cache time to live (TTL) value.
        public let cachePeriodInMinutes: Int64

        @inlinable
        public init(address: String, cachePeriodInMinutes: Int64) {
            self.address = address
            self.cachePeriodInMinutes = cachePeriodInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case cachePeriodInMinutes = "CachePeriodInMinutes"
        }
    }

    public struct ExecuteStatementInput: AWSEncodableShape {
        /// The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
        public let consistentRead: Bool?
        /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, along with a key in LastEvaluatedKey to apply in a subsequent operation so you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation.
        public let limit: Int?
        /// Set this value to get remaining results, if NextToken was returned in the statement response.
        public let nextToken: String?
        /// The parameters for the PartiQL statement, if any.
        public let parameters: [AttributeValue]?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// An optional parameter that returns the item attributes for an ExecuteStatement operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// The PartiQL statement representing the operation to run.
        public let statement: String

        @inlinable
        public init(consistentRead: Bool? = nil, limit: Int? = nil, nextToken: String? = nil, parameters: [AttributeValue]? = nil, returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, statement: String) {
            self.consistentRead = consistentRead
            self.limit = limit
            self.nextToken = nextToken
            self.parameters = parameters
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.statement = statement
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 32768)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.parameters?.forEach {
                try $0.validate(name: "\(name).parameters[]")
            }
            try self.validate(self.parameters, name: "parameters", parent: name, min: 1)
            try self.validate(self.statement, name: "statement", parent: name, max: 8192)
            try self.validate(self.statement, name: "statement", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case consistentRead = "ConsistentRead"
            case limit = "Limit"
            case nextToken = "NextToken"
            case parameters = "Parameters"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case statement = "Statement"
        }
    }

    public struct ExecuteStatementOutput: AWSDecodableShape {
        public let consumedCapacity: ConsumedCapacity?
        /// If a read operation was used, this property will contain the result of the read operation; a map of attribute names and their values. For the write operations this value will be empty.
        public let items: [[String: AttributeValue]]?
        /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
        public let lastEvaluatedKey: [String: AttributeValue]?
        /// If the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results.
        public let nextToken: String?

        @inlinable
        public init(consumedCapacity: ConsumedCapacity? = nil, items: [[String: AttributeValue]]? = nil, lastEvaluatedKey: [String: AttributeValue]? = nil, nextToken: String? = nil) {
            self.consumedCapacity = consumedCapacity
            self.items = items
            self.lastEvaluatedKey = lastEvaluatedKey
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case items = "Items"
            case lastEvaluatedKey = "LastEvaluatedKey"
            case nextToken = "NextToken"
        }
    }

    public struct ExecuteTransactionInput: AWSEncodableShape {
        /// Set this value to get remaining results, if NextToken was returned in the statement response.
        public let clientRequestToken: String?
        /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response. For more information, see TransactGetItems and TransactWriteItems.
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// The list of PartiQL statements representing the transaction to run.
        public let transactStatements: [ParameterizedStatement]

        @inlinable
        public init(clientRequestToken: String? = ExecuteTransactionInput.idempotencyToken(), returnConsumedCapacity: ReturnConsumedCapacity? = nil, transactStatements: [ParameterizedStatement]) {
            self.clientRequestToken = clientRequestToken
            self.returnConsumedCapacity = returnConsumedCapacity
            self.transactStatements = transactStatements
        }

        public func validate(name: String) throws {
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 36)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 1)
            try self.transactStatements.forEach {
                try $0.validate(name: "\(name).transactStatements[]")
            }
            try self.validate(self.transactStatements, name: "transactStatements", parent: name, max: 100)
            try self.validate(self.transactStatements, name: "transactStatements", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case transactStatements = "TransactStatements"
        }
    }

    public struct ExecuteTransactionOutput: AWSDecodableShape {
        /// The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.
        public let consumedCapacity: [ConsumedCapacity]?
        /// The response to a PartiQL transaction.
        public let responses: [ItemResponse]?

        @inlinable
        public init(consumedCapacity: [ConsumedCapacity]? = nil, responses: [ItemResponse]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case responses = "Responses"
        }
    }

    public struct ExpectedAttributeValue: AWSEncodableShape {
        /// One or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used. For type Number, value comparisons are numeric. String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A, and a is greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters. For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values. For information on specifying data types in JSON, see JSON Data Format in the Amazon DynamoDB Developer Guide.
        public let attributeValueList: [AttributeValue]?
        /// A comparator for evaluating attributes in the AttributeValueList. For example, equals, greater than, less than, etc. The following comparison operators are available:  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN  The following are descriptions of each comparison operator.    EQ : Equal. EQ is supported for all data types, including lists and maps.  AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.     NE : Not equal. NE is supported for all data types, including lists and maps.  AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.     LE : Less than or equal.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     LT : Less than.   AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     GE : Greater than or equal.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     GT : Greater than.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     NOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.  This operator tests for the existence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NOT_NULL, the result is a Boolean true. This result is because the attribute "a" exists; its data type is not relevant to the NOT_NULL comparison operator.     NULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.  This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NULL, the result is a Boolean false. This is because the attribute "a" exists; its data type is not relevant to the NULL comparison operator.     CONTAINS : Checks for a subsequence, or value in a set.  AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating "a CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set.  AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "a NOT CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.    BEGINS_WITH : Checks for a prefix.   AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).     IN : Checks for matching elements in a list.  AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.    BETWEEN : Greater than or equal to the first value, and less than or equal to the second value.   AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not compare to {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}
        public let comparisonOperator: ComparisonOperator?
        /// Causes DynamoDB to evaluate the value before attempting a conditional operation:   If Exists is true, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a ConditionCheckFailedException.   If Exists is false, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a ConditionCheckFailedException.   The default setting for Exists is true. If you supply a Value all by itself, DynamoDB assumes the attribute exists: You don't have to set Exists to true, because it is implied. DynamoDB returns a ValidationException if:    Exists is true but there is no Value to check. (You expect a value to exist, but don't specify what that value is.)    Exists is false but you also provide a Value. (You cannot expect an attribute to have a value, while also expecting it not to exist.)
        public let exists: Bool?
        /// Represents the data for the expected attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see Data Types in the Amazon DynamoDB Developer Guide.
        public let value: AttributeValue?

        @inlinable
        public init(attributeValueList: [AttributeValue]? = nil, comparisonOperator: ComparisonOperator? = nil, exists: Bool? = nil, value: AttributeValue? = nil) {
            self.attributeValueList = attributeValueList
            self.comparisonOperator = comparisonOperator
            self.exists = exists
            self.value = value
        }

        public func validate(name: String) throws {
            try self.attributeValueList?.forEach {
                try $0.validate(name: "\(name).attributeValueList[]")
            }
            try self.value?.validate(name: "\(name).value")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValueList = "AttributeValueList"
            case comparisonOperator = "ComparisonOperator"
            case exists = "Exists"
            case value = "Value"
        }
    }

    public struct FailureException: AWSDecodableShape {
        /// Description of the failure.
        public let exceptionDescription: String?
        /// Exception name.
        public let exceptionName: String?

        @inlinable
        public init(exceptionDescription: String? = nil, exceptionName: String? = nil) {
            self.exceptionDescription = exceptionDescription
            self.exceptionName = exceptionName
        }

        private enum CodingKeys: String, CodingKey {
            case exceptionDescription = "ExceptionDescription"
            case exceptionName = "ExceptionName"
        }
    }

    public struct Get: AWSEncodableShape {
        /// One or more substitution tokens for attribute names in the ProjectionExpression parameter.
        public let expressionAttributeNames: [String: String]?
        /// A map of attribute names to AttributeValue objects that specifies the primary key of the item to retrieve.
        public let key: [String: AttributeValue]
        /// A string that identifies one or more attributes of the specified item to retrieve from the table. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes of the specified item are returned. If any of the requested attributes are not found, they do not appear in the result.
        public let projectionExpression: String?
        /// The name of the table from which to retrieve the specified item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(expressionAttributeNames: [String: String]? = nil, key: [String: AttributeValue], projectionExpression: String? = nil, tableName: String) {
            self.expressionAttributeNames = expressionAttributeNames
            self.key = key
            self.projectionExpression = projectionExpression
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case expressionAttributeNames = "ExpressionAttributeNames"
            case key = "Key"
            case projectionExpression = "ProjectionExpression"
            case tableName = "TableName"
        }
    }

    public struct GetItemInput: AWSEncodableShape {
        /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide.
        public let attributesToGet: [String]?
        /// Determines the read consistency model: If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.
        public let consistentRead: Bool?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// A map of attribute names to AttributeValue objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
        public let key: [String: AttributeValue]
        /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let projectionExpression: String?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// The name of the table containing the requested item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(attributesToGet: [String]? = nil, consistentRead: Bool? = nil, expressionAttributeNames: [String: String]? = nil, key: [String: AttributeValue], projectionExpression: String? = nil, returnConsumedCapacity: ReturnConsumedCapacity? = nil, tableName: String) {
            self.attributesToGet = attributesToGet
            self.consistentRead = consistentRead
            self.expressionAttributeNames = expressionAttributeNames
            self.key = key
            self.projectionExpression = projectionExpression
            self.returnConsumedCapacity = returnConsumedCapacity
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.attributesToGet?.forEach {
                try validate($0, name: "attributesToGet[]", parent: name, max: 65535)
            }
            try self.validate(self.attributesToGet, name: "attributesToGet", parent: name, min: 1)
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case consistentRead = "ConsistentRead"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case key = "Key"
            case projectionExpression = "ProjectionExpression"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case tableName = "TableName"
        }
    }

    public struct GetItemOutput: AWSDecodableShape {
        /// The capacity units consumed by the GetItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Capacity unit consumption for read operations in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// A map of attribute names to AttributeValue objects, as specified by ProjectionExpression.
        public let item: [String: AttributeValue]?

        @inlinable
        public init(consumedCapacity: ConsumedCapacity? = nil, item: [String: AttributeValue]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case item = "Item"
        }
    }

    public struct GetResourcePolicyInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the DynamoDB resource to which the policy is attached. The resources you can specify include tables and streams.
        public let resourceArn: String

        @inlinable
        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1283)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetResourcePolicyOutput: AWSDecodableShape {
        /// The resource-based policy document attached to the resource, which can be a table or stream, in JSON format.
        public let policy: String?
        /// A unique string that represents the revision ID of the policy. If you're comparing revision IDs, make sure to always use string comparison logic.
        public let revisionId: String?

        @inlinable
        public init(policy: String? = nil, revisionId: String? = nil) {
            self.policy = policy
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case revisionId = "RevisionId"
        }
    }

    public struct GlobalSecondaryIndex: AWSEncodableShape & AWSDecodableShape {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        public let indexName: String
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]
        /// The maximum number of read and write units for the specified global secondary index. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public let onDemandThroughput: OnDemandThroughput?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
        public let provisionedThroughput: ProvisionedThroughput?
        /// Represents the warm throughput value (in read units per second and write units per second) for the specified secondary index. If you use this parameter, you must specify ReadUnitsPerSecond, WriteUnitsPerSecond, or both.
        public let warmThroughput: WarmThroughput?

        @inlinable
        public init(indexName: String, keySchema: [KeySchemaElement], onDemandThroughput: OnDemandThroughput? = nil, projection: Projection, provisionedThroughput: ProvisionedThroughput? = nil, warmThroughput: WarmThroughput? = nil) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.onDemandThroughput = onDemandThroughput
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
            self.warmThroughput = warmThroughput
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.keySchema.forEach {
                try $0.validate(name: "\(name).keySchema[]")
            }
            try self.validate(self.keySchema, name: "keySchema", parent: name, max: 2)
            try self.validate(self.keySchema, name: "keySchema", parent: name, min: 1)
            try self.projection.validate(name: "\(name).projection")
            try self.provisionedThroughput?.validate(name: "\(name).provisionedThroughput")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case onDemandThroughput = "OnDemandThroughput"
            case projection = "Projection"
            case provisionedThroughput = "ProvisionedThroughput"
            case warmThroughput = "WarmThroughput"
        }
    }

    public struct GlobalSecondaryIndexInfo: AWSDecodableShape {
        /// The name of the global secondary index.
        public let indexName: String?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]?
        public let onDemandThroughput: OnDemandThroughput?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index.
        public let provisionedThroughput: ProvisionedThroughput?

        @inlinable
        public init(indexName: String? = nil, keySchema: [KeySchemaElement]? = nil, onDemandThroughput: OnDemandThroughput? = nil, projection: Projection? = nil, provisionedThroughput: ProvisionedThroughput? = nil) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.onDemandThroughput = onDemandThroughput
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case onDemandThroughput = "OnDemandThroughput"
            case projection = "Projection"
            case provisionedThroughput = "ProvisionedThroughput"
        }
    }

    public struct IncrementalExportSpecification: AWSEncodableShape & AWSDecodableShape {
        /// Time in the past which provides the inclusive start range for the export table's data, counted in seconds from the start of the Unix epoch. The incremental export will reflect the table's state including and after this point in time.
        public let exportFromTime: Date?
        /// Time in the past which provides the exclusive end range for the export table's data, counted in seconds from the start of the Unix epoch. The incremental export will reflect the table's state just prior to this point in time. If this is not provided, the latest time with data available will be used.
        public let exportToTime: Date?
        /// The view type that was chosen for the export. Valid values are NEW_AND_OLD_IMAGES and NEW_IMAGES. The default value is NEW_AND_OLD_IMAGES.
        public let exportViewType: ExportViewType?

        @inlinable
        public init(exportFromTime: Date? = nil, exportToTime: Date? = nil, exportViewType: ExportViewType? = nil) {
            self.exportFromTime = exportFromTime
            self.exportToTime = exportToTime
            self.exportViewType = exportViewType
        }

        private enum CodingKeys: String, CodingKey {
            case exportFromTime = "ExportFromTime"
            case exportToTime = "ExportToTime"
            case exportViewType = "ExportViewType"
        }
    }

    public struct ItemCollectionMetrics: AWSDecodableShape {
        /// The partition key value of the item collection. This value is the same as the partition key value of the item.
        public let itemCollectionKey: [String: AttributeValue]?
        /// An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let sizeEstimateRangeGB: [Double]?

        @inlinable
        public init(itemCollectionKey: [String: AttributeValue]? = nil, sizeEstimateRangeGB: [Double]? = nil) {
            self.itemCollectionKey = itemCollectionKey
            self.sizeEstimateRangeGB = sizeEstimateRangeGB
        }

        private enum CodingKeys: String, CodingKey {
            case itemCollectionKey = "ItemCollectionKey"
            case sizeEstimateRangeGB = "SizeEstimateRangeGB"
        }
    }

    public struct ItemResponse: AWSDecodableShape {
        /// Map of attribute data consisting of the data type and attribute value.
        public let item: [String: AttributeValue]?

        @inlinable
        public init(item: [String: AttributeValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct KeySchemaElement: AWSEncodableShape & AWSDecodableShape {
        /// The name of a key attribute.
        public let attributeName: String
        /// The role that this key attribute will assume:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keyType: KeyType

        @inlinable
        public init(attributeName: String, keyType: KeyType) {
            self.attributeName = attributeName
            self.keyType = keyType
        }

        public func validate(name: String) throws {
            try self.validate(self.attributeName, name: "attributeName", parent: name, max: 255)
            try self.validate(self.attributeName, name: "attributeName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case keyType = "KeyType"
        }
    }

    public struct KeysAndAttributes: AWSEncodableShape & AWSDecodableShape {
        /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide.
        public let attributesToGet: [String]?
        /// The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
        public let consistentRead: Bool?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// The primary key attribute values that define the items and the attributes associated with the items.
        public let keys: [[String: AttributeValue]]
        /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
        public let projectionExpression: String?

        @inlinable
        public init(attributesToGet: [String]? = nil, consistentRead: Bool? = nil, expressionAttributeNames: [String: String]? = nil, keys: [[String: AttributeValue]], projectionExpression: String? = nil) {
            self.attributesToGet = attributesToGet
            self.consistentRead = consistentRead
            self.expressionAttributeNames = expressionAttributeNames
            self.keys = keys
            self.projectionExpression = projectionExpression
        }

        public func validate(name: String) throws {
            try self.attributesToGet?.forEach {
                try validate($0, name: "attributesToGet[]", parent: name, max: 65535)
            }
            try self.validate(self.attributesToGet, name: "attributesToGet", parent: name, min: 1)
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.validate(self.keys, name: "keys", parent: name, max: 100)
            try self.validate(self.keys, name: "keys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case consistentRead = "ConsistentRead"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case keys = "Keys"
            case projectionExpression = "ProjectionExpression"
        }
    }

    public struct ListGlobalTablesInput: AWSEncodableShape {
        /// The first global table name that this operation will evaluate.
        public let exclusiveStartGlobalTableName: String?
        /// The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100. If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.
        public let limit: Int?
        /// Lists the global tables in a specific Region.
        public let regionName: String?

        @inlinable
        public init(exclusiveStartGlobalTableName: String? = nil, limit: Int? = nil, regionName: String? = nil) {
            self.exclusiveStartGlobalTableName = exclusiveStartGlobalTableName
            self.limit = limit
            self.regionName = regionName
        }

        public func validate(name: String) throws {
            try self.validate(self.exclusiveStartGlobalTableName, name: "exclusiveStartGlobalTableName", parent: name, max: 255)
            try self.validate(self.exclusiveStartGlobalTableName, name: "exclusiveStartGlobalTableName", parent: name, min: 3)
            try self.validate(self.exclusiveStartGlobalTableName, name: "exclusiveStartGlobalTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case exclusiveStartGlobalTableName = "ExclusiveStartGlobalTableName"
            case limit = "Limit"
            case regionName = "RegionName"
        }
    }

    public struct ListTagsOfResourceInput: AWSEncodableShape {
        /// An optional string that, if supplied, must be copied from the output of a previous call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.
        public let nextToken: String?
        /// The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).
        public let resourceArn: String

        @inlinable
        public init(nextToken: String? = nil, resourceArn: String) {
            self.nextToken = nextToken
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1283)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsOfResourceOutput: AWSDecodableShape {
        /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListTagsOfResource again, with NextToken set to this value.
        public let nextToken: String?
        /// The tags currently associated with the Amazon DynamoDB resource.
        public let tags: [Tag]?

        @inlinable
        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct LocalSecondaryIndex: AWSEncodableShape {
        /// The name of the local secondary index. The name must be unique among all other indexes on this table.
        public let indexName: String
        /// The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]
        /// Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection

        @inlinable
        public init(indexName: String, keySchema: [KeySchemaElement], projection: Projection) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.keySchema.forEach {
                try $0.validate(name: "\(name).keySchema[]")
            }
            try self.validate(self.keySchema, name: "keySchema", parent: name, max: 2)
            try self.validate(self.keySchema, name: "keySchema", parent: name, min: 1)
            try self.projection.validate(name: "\(name).projection")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case projection = "Projection"
        }
    }

    public struct LocalSecondaryIndexDescription: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that uniquely identifies the index.
        public let indexArn: String?
        /// Represents the name of the local secondary index.
        public let indexName: String?
        /// The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public let indexSizeBytes: Int64?
        /// The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public let itemCount: Int64?
        /// The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection?

        @inlinable
        public init(indexArn: String? = nil, indexName: String? = nil, indexSizeBytes: Int64? = nil, itemCount: Int64? = nil, keySchema: [KeySchemaElement]? = nil, projection: Projection? = nil) {
            self.indexArn = indexArn
            self.indexName = indexName
            self.indexSizeBytes = indexSizeBytes
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.projection = projection
        }

        private enum CodingKeys: String, CodingKey {
            case indexArn = "IndexArn"
            case indexName = "IndexName"
            case indexSizeBytes = "IndexSizeBytes"
            case itemCount = "ItemCount"
            case keySchema = "KeySchema"
            case projection = "Projection"
        }
    }

    public struct LocalSecondaryIndexInfo: AWSDecodableShape {
        /// Represents the name of the local secondary index.
        public let indexName: String?
        /// The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection?

        @inlinable
        public init(indexName: String? = nil, keySchema: [KeySchemaElement]? = nil, projection: Projection? = nil) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case projection = "Projection"
        }
    }

    public struct OnDemandThroughput: AWSEncodableShape & AWSDecodableShape {
        /// Maximum number of read request units for the specified table. To specify a maximum OnDemandThroughput on your table, set the value of MaxReadRequestUnits as greater than or equal to 1. To remove the maximum OnDemandThroughput that is currently set on your table, set the value of MaxReadRequestUnits to -1.
        public let maxReadRequestUnits: Int64?
        /// Maximum number of write request units for the specified table. To specify a maximum OnDemandThroughput on your table, set the value of MaxWriteRequestUnits as greater than or equal to 1. To remove the maximum OnDemandThroughput that is currently set on your table, set the value of MaxWriteRequestUnits to -1.
        public let maxWriteRequestUnits: Int64?

        @inlinable
        public init(maxReadRequestUnits: Int64? = nil, maxWriteRequestUnits: Int64? = nil) {
            self.maxReadRequestUnits = maxReadRequestUnits
            self.maxWriteRequestUnits = maxWriteRequestUnits
        }

        private enum CodingKeys: String, CodingKey {
            case maxReadRequestUnits = "MaxReadRequestUnits"
            case maxWriteRequestUnits = "MaxWriteRequestUnits"
        }
    }

    public struct OnDemandThroughputOverride: AWSEncodableShape & AWSDecodableShape {
        /// Maximum number of read request units for the specified replica table.
        public let maxReadRequestUnits: Int64?

        @inlinable
        public init(maxReadRequestUnits: Int64? = nil) {
            self.maxReadRequestUnits = maxReadRequestUnits
        }

        private enum CodingKeys: String, CodingKey {
            case maxReadRequestUnits = "MaxReadRequestUnits"
        }
    }

    public struct ParameterizedStatement: AWSEncodableShape {
        ///  The parameter values.
        public let parameters: [AttributeValue]?
        /// An optional parameter that returns the item attributes for a PartiQL ParameterizedStatement operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        ///  A PartiQL statement that uses parameters.
        public let statement: String

        @inlinable
        public init(parameters: [AttributeValue]? = nil, returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, statement: String) {
            self.parameters = parameters
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.statement = statement
        }

        public func validate(name: String) throws {
            try self.parameters?.forEach {
                try $0.validate(name: "\(name).parameters[]")
            }
            try self.validate(self.parameters, name: "parameters", parent: name, min: 1)
            try self.validate(self.statement, name: "statement", parent: name, max: 8192)
            try self.validate(self.statement, name: "statement", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case statement = "Statement"
        }
    }

    public struct PointInTimeRecoveryDescription: AWSDecodableShape {
        /// Specifies the earliest point in time you can restore your table to. You can restore your table to any point in time during the last 35 days.
        public let earliestRestorableDateTime: Date?
        ///  LatestRestorableDateTime is typically 5 minutes before the current time.
        public let latestRestorableDateTime: Date?
        /// The current state of point in time recovery:    ENABLED - Point in time recovery is enabled.    DISABLED - Point in time recovery is disabled.
        public let pointInTimeRecoveryStatus: PointInTimeRecoveryStatus?
        /// The number of preceding days for which continuous backups are taken and maintained. Your table data is only recoverable to any point-in-time from within the configured recovery period. This parameter is optional. If no value is provided, the value will default to 35.
        public let recoveryPeriodInDays: Int?

        @inlinable
        public init(earliestRestorableDateTime: Date? = nil, latestRestorableDateTime: Date? = nil, pointInTimeRecoveryStatus: PointInTimeRecoveryStatus? = nil, recoveryPeriodInDays: Int? = nil) {
            self.earliestRestorableDateTime = earliestRestorableDateTime
            self.latestRestorableDateTime = latestRestorableDateTime
            self.pointInTimeRecoveryStatus = pointInTimeRecoveryStatus
            self.recoveryPeriodInDays = recoveryPeriodInDays
        }

        private enum CodingKeys: String, CodingKey {
            case earliestRestorableDateTime = "EarliestRestorableDateTime"
            case latestRestorableDateTime = "LatestRestorableDateTime"
            case pointInTimeRecoveryStatus = "PointInTimeRecoveryStatus"
            case recoveryPeriodInDays = "RecoveryPeriodInDays"
        }
    }

    public struct PointInTimeRecoverySpecification: AWSEncodableShape {
        /// Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.
        public let pointInTimeRecoveryEnabled: Bool
        /// The number of preceding days for which continuous backups are taken and maintained. Your table data is only recoverable to any point-in-time from within the configured recovery period. This parameter is optional. If no value is provided, the value will default to 35.
        public let recoveryPeriodInDays: Int?

        @inlinable
        public init(pointInTimeRecoveryEnabled: Bool, recoveryPeriodInDays: Int? = nil) {
            self.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled
            self.recoveryPeriodInDays = recoveryPeriodInDays
        }

        public func validate(name: String) throws {
            try self.validate(self.recoveryPeriodInDays, name: "recoveryPeriodInDays", parent: name, max: 35)
            try self.validate(self.recoveryPeriodInDays, name: "recoveryPeriodInDays", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case pointInTimeRecoveryEnabled = "PointInTimeRecoveryEnabled"
            case recoveryPeriodInDays = "RecoveryPeriodInDays"
        }
    }

    public struct Projection: AWSEncodableShape & AWSDecodableShape {
        /// Represents the non-key attribute names which will be projected into the index. For local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        public let nonKeyAttributes: [String]?
        /// The set of attributes that are projected into the index:    KEYS_ONLY - Only the index and primary keys are projected into the index.    INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.    ALL - All of the table attributes are projected into the index.   When using the DynamoDB console, ALL is selected by default.
        public let projectionType: ProjectionType?

        @inlinable
        public init(nonKeyAttributes: [String]? = nil, projectionType: ProjectionType? = nil) {
            self.nonKeyAttributes = nonKeyAttributes
            self.projectionType = projectionType
        }

        public func validate(name: String) throws {
            try self.nonKeyAttributes?.forEach {
                try validate($0, name: "nonKeyAttributes[]", parent: name, max: 255)
                try validate($0, name: "nonKeyAttributes[]", parent: name, min: 1)
            }
            try self.validate(self.nonKeyAttributes, name: "nonKeyAttributes", parent: name, max: 20)
            try self.validate(self.nonKeyAttributes, name: "nonKeyAttributes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case nonKeyAttributes = "NonKeyAttributes"
            case projectionType = "ProjectionType"
        }
    }

    public struct ProvisionedThroughput: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide. If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
        public let readCapacityUnits: Int64
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException. For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide. If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
        public let writeCapacityUnits: Int64

        @inlinable
        public init(readCapacityUnits: Int64, writeCapacityUnits: Int64) {
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }

        public func validate(name: String) throws {
            try self.validate(self.readCapacityUnits, name: "readCapacityUnits", parent: name, min: 1)
            try self.validate(self.writeCapacityUnits, name: "writeCapacityUnits", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case readCapacityUnits = "ReadCapacityUnits"
            case writeCapacityUnits = "WriteCapacityUnits"
        }
    }

    public struct ProvisionedThroughputDescription: AWSDecodableShape {
        /// The date and time of the last provisioned throughput decrease for this table.
        public let lastDecreaseDateTime: Date?
        /// The date and time of the last provisioned throughput increase for this table.
        public let lastIncreaseDateTime: Date?
        /// The number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
        public let numberOfDecreasesToday: Int64?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.
        public let readCapacityUnits: Int64?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public let writeCapacityUnits: Int64?

        @inlinable
        public init(lastDecreaseDateTime: Date? = nil, lastIncreaseDateTime: Date? = nil, numberOfDecreasesToday: Int64? = nil, readCapacityUnits: Int64? = nil, writeCapacityUnits: Int64? = nil) {
            self.lastDecreaseDateTime = lastDecreaseDateTime
            self.lastIncreaseDateTime = lastIncreaseDateTime
            self.numberOfDecreasesToday = numberOfDecreasesToday
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case lastDecreaseDateTime = "LastDecreaseDateTime"
            case lastIncreaseDateTime = "LastIncreaseDateTime"
            case numberOfDecreasesToday = "NumberOfDecreasesToday"
            case readCapacityUnits = "ReadCapacityUnits"
            case writeCapacityUnits = "WriteCapacityUnits"
        }
    }

    public struct ProvisionedThroughputOverride: AWSEncodableShape & AWSDecodableShape {
        /// Replica-specific read capacity units. If not specified, uses the source table's read capacity settings.
        public let readCapacityUnits: Int64?

        @inlinable
        public init(readCapacityUnits: Int64? = nil) {
            self.readCapacityUnits = readCapacityUnits
        }

        public func validate(name: String) throws {
            try self.validate(self.readCapacityUnits, name: "readCapacityUnits", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case readCapacityUnits = "ReadCapacityUnits"
        }
    }

    public struct Put: AWSEncodableShape {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public let conditionExpression: String?
        /// One or more substitution tokens for attribute names in an expression.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A map of attribute name to attribute values, representing the primary key of the item to be written by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        public let item: [String: AttributeValue]
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Put condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which to write the item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(conditionExpression: String? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, item: [String: AttributeValue], returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String) {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.item = item
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.item.forEach {
                try validate($0.key, name: "item.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).item[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case conditionExpression = "ConditionExpression"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case item = "Item"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
        }
    }

    public struct PutItemInput: AWSEncodableShape {
        /// This is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// A condition that must be satisfied in order for a conditional PutItem operation to succeed. An expression can contain any of the following:   Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size  These function names are case-sensitive.   Comparison operators: = | <> | | = | BETWEEN | IN     Logical operators: AND | OR | NOT    For more information on condition expressions, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let conditionExpression: String?
        /// This is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide.
        public let expected: [String: ExpectedAttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index. For more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide. Each element in the Item map is an AttributeValue object.
        public let item: [String: AttributeValue]
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
        /// Use ReturnValues if you want to get the item attributes as they appeared before they were updated with the PutItem request. For PutItem, the valid values are:    NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)    ALL_OLD - If PutItem overwrote an attribute name-value pair, then the content of the old item is returned.   The values returned are strongly consistent. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.  The ReturnValues parameter is used by several DynamoDB operations; however, PutItem does not recognize any values other than NONE or ALL_OLD.
        public let returnValues: ReturnValue?
        /// An optional parameter that returns the item attributes for a PutItem operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// The name of the table to contain the item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(conditionalOperator: ConditionalOperator? = nil, conditionExpression: String? = nil, expected: [String: ExpectedAttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, item: [String: AttributeValue], returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil, returnValues: ReturnValue? = nil, returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String) {
            self.conditionalOperator = conditionalOperator
            self.conditionExpression = conditionExpression
            self.expected = expected
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.item = item
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
            self.returnValues = returnValues
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expected?.forEach {
                try validate($0.key, name: "expected.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).expected[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.item.forEach {
                try validate($0.key, name: "item.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).item[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case conditionalOperator = "ConditionalOperator"
            case conditionExpression = "ConditionExpression"
            case expected = "Expected"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case item = "Item"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
            case returnValues = "ReturnValues"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
        }
    }

    public struct PutItemOutput: AWSDecodableShape {
        /// The attribute values as they appeared before the PutItem operation, but only if ReturnValues is specified as ALL_OLD in the request. Each element consists of an attribute name and an attribute value.
        public let attributes: [String: AttributeValue]?
        /// The capacity units consumed by the PutItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Capacity unity consumption for write operations in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// Information about item collections, if any, that were affected by the PutItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:    ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.    SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let itemCollectionMetrics: ItemCollectionMetrics?

        @inlinable
        public init(attributes: [String: AttributeValue]? = nil, consumedCapacity: ConsumedCapacity? = nil, itemCollectionMetrics: ItemCollectionMetrics? = nil) {
            self.attributes = attributes
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
        }
    }

    public struct PutRequest: AWSEncodableShape & AWSDecodableShape {
        /// A map of attribute name to attribute values, representing the primary key of an item to be processed by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        public let item: [String: AttributeValue]

        @inlinable
        public init(item: [String: AttributeValue]) {
            self.item = item
        }

        public func validate(name: String) throws {
            try self.item.forEach {
                try validate($0.key, name: "item.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).item[\"\($0.key)\"]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct PutResourcePolicyInput: AWSEncodableShape {
        /// Set this parameter to true to confirm that you want to remove your permissions to change the policy of this resource in the future.
        public let confirmRemoveSelfResourceAccess: Bool?
        /// A string value that you can use to conditionally update your policy. You can provide the revision ID of your existing policy to make mutating requests against that policy.  When you provide an expected revision ID, if the revision ID of the existing policy on the resource doesn't match or if there's no policy attached to the resource, your request will be rejected with a PolicyNotFoundException.  To conditionally attach a policy when no policy exists for the resource, specify NO_POLICY for the revision ID.
        public let expectedRevisionId: String?
        /// An Amazon Web Services resource-based policy document in JSON format.   The maximum size supported for a resource-based policy document is 20 KB. DynamoDB counts whitespaces when calculating the size of a policy against this limit.   Within a resource-based policy, if the action for a DynamoDB service-linked role (SLR) to replicate data for a global table is denied, adding or deleting a replica will fail with an error.   For a full list of all considerations that apply while attaching a resource-based policy, see Resource-based policy considerations.
        public let policy: String
        /// The Amazon Resource Name (ARN) of the DynamoDB resource to which the policy will be attached. The resources you can specify include tables and streams. You can control index permissions using the base table's policy. To specify the same permission level for your table and its indexes, you can provide both the table and index Amazon Resource Name (ARN)s in the Resource field of a given Statement in your policy document. Alternatively, to specify different permissions for your table, indexes, or both, you can define multiple Statement fields in your policy document.
        public let resourceArn: String

        @inlinable
        public init(confirmRemoveSelfResourceAccess: Bool? = nil, expectedRevisionId: String? = nil, policy: String, resourceArn: String) {
            self.confirmRemoveSelfResourceAccess = confirmRemoveSelfResourceAccess
            self.expectedRevisionId = expectedRevisionId
            self.policy = policy
            self.resourceArn = resourceArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodeHeader(self.confirmRemoveSelfResourceAccess, key: "x-amz-confirm-remove-self-resource-access")
            try container.encodeIfPresent(self.expectedRevisionId, forKey: .expectedRevisionId)
            try container.encode(self.policy, forKey: .policy)
            try container.encode(self.resourceArn, forKey: .resourceArn)
        }

        public func validate(name: String) throws {
            try self.validate(self.expectedRevisionId, name: "expectedRevisionId", parent: name, max: 255)
            try self.validate(self.expectedRevisionId, name: "expectedRevisionId", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1283)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case expectedRevisionId = "ExpectedRevisionId"
            case policy = "Policy"
            case resourceArn = "ResourceArn"
        }
    }

    public struct PutResourcePolicyOutput: AWSDecodableShape {
        /// A unique string that represents the revision ID of the policy. If you're comparing revision IDs, make sure to always use string comparison logic.
        public let revisionId: String?

        @inlinable
        public init(revisionId: String? = nil) {
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case revisionId = "RevisionId"
        }
    }

    public struct QueryInput: AWSEncodableShape {
        /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide.
        public let attributesToGet: [String]?
        /// This is a legacy parameter. Use FilterExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// Determines the read consistency model: If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads. Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with ConsistentRead set to true, you will receive a ValidationException.
        public let consistentRead: Bool?
        /// The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation. The data type for ExclusiveStartKey must be String, Number, or Binary. No set data types are allowed.
        public let exclusiveStartKey: [String: AttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Specifying Conditions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A string that contains conditions that DynamoDB applies after the Query operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned. A FilterExpression does not allow key attributes. You cannot define a filter expression based on a partition key or a sort key.  A FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.  For more information, see Filter Expressions in the Amazon DynamoDB Developer Guide.
        public let filterExpression: String?
        /// The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the IndexName parameter, you must also provide TableName.
        public let indexName: String?
        /// The condition that specifies the key values for items to be retrieved by the Query action. The condition must perform an equality test on a single partition key value. The condition can optionally perform one of several comparison tests on a single sort key value. This allows Query to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values. The partition key equality test is required, and must be specified in the following format:  partitionKeyName = :partitionkeyval  If you also want to provide a condition for the sort key, it must be combined using AND with the condition for the sort key. Following is an example, using the = comparison operator for the sort key:  partitionKeyName = :partitionkeyval AND sortKeyName = :sortkeyval  Valid comparisons for the sort key condition are as follows:    sortKeyName = :sortkeyval - true if the sort key value is equal to :sortkeyval.    sortKeyName  :sortkeyval - true if the sort key value is less than :sortkeyval.    sortKeyName  :sortkeyval - true if the sort key value is less than or equal to :sortkeyval.    sortKeyName > :sortkeyval - true if the sort key value is greater than :sortkeyval.    sortKeyName >=  :sortkeyval - true if the sort key value is greater than or equal to :sortkeyval.    sortKeyName BETWEEN :sortkeyval1 AND :sortkeyval2 - true if the sort key value is greater than or equal to :sortkeyval1, and less than or equal to :sortkeyval2.    begins_with ( sortKeyName, :sortkeyval ) - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name begins_with is case-sensitive.   Use the ExpressionAttributeValues parameter to replace tokens such as :partitionval and :sortval with actual values at runtime. You can optionally use the ExpressionAttributeNames parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following KeyConditionExpression parameter causes an error because Size is a reserved word:    Size = :myval    To work around this, define a placeholder (such a #S) to represent the attribute name Size. KeyConditionExpression then is as follows:    #S = :myval    For a list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide. For more information on ExpressionAttributeNames and ExpressionAttributeValues, see Using Placeholders for Attribute Names and Values in the Amazon DynamoDB Developer Guide.
        public let keyConditionExpression: String?
        /// This is a legacy parameter. Use KeyConditionExpression instead. For more information, see KeyConditions in the Amazon DynamoDB Developer Guide.
        public let keyConditions: [String: Condition]?
        /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see Query and Scan in the Amazon DynamoDB Developer Guide.
        public let limit: Int?
        /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
        public let projectionExpression: String?
        /// This is a legacy parameter. Use FilterExpression instead. For more information, see QueryFilter in the Amazon DynamoDB Developer Guide.
        public let queryFilter: [String: Condition]?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Specifies the order for index traversal: If true (default), the traversal is performed in ascending order; if false, the traversal is performed in descending order.  Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned. If ScanIndexForward is true, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If ScanIndexForward is false, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.
        public let scanIndexForward: Bool?
        /// The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.    ALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.    ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES.    COUNT - Returns the number of matching items, rather than the matching items themselves. Note that this uses the same quantity of read capacity units as getting the items, and is subject to the same item size calculations.    SPECIFIC_ATTRIBUTES - Returns only the attributes listed in ProjectionExpression. This return value is equivalent to specifying ProjectionExpression without specifying any value for Select. If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.   If neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select.)  If you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an error.
        public let select: Select?
        /// The name of the table containing the requested items. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String

        @inlinable
        public init(attributesToGet: [String]? = nil, conditionalOperator: ConditionalOperator? = nil, consistentRead: Bool? = nil, exclusiveStartKey: [String: AttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, filterExpression: String? = nil, indexName: String? = nil, keyConditionExpression: String? = nil, keyConditions: [String: Condition]? = nil, limit: Int? = nil, projectionExpression: String? = nil, queryFilter: [String: Condition]? = nil, returnConsumedCapacity: ReturnConsumedCapacity? = nil, scanIndexForward: Bool? = nil, select: Select? = nil, tableName: String) {
            self.attributesToGet = attributesToGet
            self.conditionalOperator = conditionalOperator
            self.consistentRead = consistentRead
            self.exclusiveStartKey = exclusiveStartKey
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.filterExpression = filterExpression
            self.indexName = indexName
            self.keyConditionExpression = keyConditionExpression
            self.keyConditions = keyConditions
            self.limit = limit
            self.projectionExpression = projectionExpression
            self.queryFilter = queryFilter
            self.returnConsumedCapacity = returnConsumedCapacity
            self.scanIndexForward = scanIndexForward
            self.select = select
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.attributesToGet?.forEach {
                try validate($0, name: "attributesToGet[]", parent: name, max: 65535)
            }
            try self.validate(self.attributesToGet, name: "attributesToGet", parent: name, min: 1)
            try self.exclusiveStartKey?.forEach {
                try validate($0.key, name: "exclusiveStartKey.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).exclusiveStartKey[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.keyConditions?.forEach {
                try validate($0.key, name: "keyConditions.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).keyConditions[\"\($0.key)\"]")
            }
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.queryFilter?.forEach {
                try validate($0.key, name: "queryFilter.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).queryFilter[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case conditionalOperator = "ConditionalOperator"
            case consistentRead = "ConsistentRead"
            case exclusiveStartKey = "ExclusiveStartKey"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case filterExpression = "FilterExpression"
            case indexName = "IndexName"
            case keyConditionExpression = "KeyConditionExpression"
            case keyConditions = "KeyConditions"
            case limit = "Limit"
            case projectionExpression = "ProjectionExpression"
            case queryFilter = "QueryFilter"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case scanIndexForward = "ScanIndexForward"
            case select = "Select"
            case tableName = "TableName"
        }
    }

    public struct QueryOutput: AWSDecodableShape {
        /// The capacity units consumed by the Query operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Capacity unit consumption for read operations in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// The number of items in the response. If you used a QueryFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied. If you did not use a filter in the request, then Count and ScannedCount are the same.
        public let count: Int?
        /// An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.
        public let items: [[String: AttributeValue]]?
        /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
        public let lastEvaluatedKey: [String: AttributeValue]?
        /// The number of items evaluated, before any QueryFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Query operation. For more information, see Count and ScannedCount in the Amazon DynamoDB Developer Guide. If you did not use a filter in the request, then ScannedCount is the same as Count.
        public let scannedCount: Int?

        @inlinable
        public init(consumedCapacity: ConsumedCapacity? = nil, count: Int? = nil, items: [[String: AttributeValue]]? = nil, lastEvaluatedKey: [String: AttributeValue]? = nil, scannedCount: Int? = nil) {
            self.consumedCapacity = consumedCapacity
            self.count = count
            self.items = items
            self.lastEvaluatedKey = lastEvaluatedKey
            self.scannedCount = scannedCount
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case count = "Count"
            case items = "Items"
            case lastEvaluatedKey = "LastEvaluatedKey"
            case scannedCount = "ScannedCount"
        }
    }

    public struct S3BucketSource: AWSEncodableShape & AWSDecodableShape {
        ///  The S3 bucket that is being imported from.
        public let s3Bucket: String
        ///  The account number of the S3 bucket that is being imported from. If the bucket is owned by the requester this is optional.
        public let s3BucketOwner: String?
        ///  The key prefix shared by all S3 Objects that are being imported.
        public let s3KeyPrefix: String?

        @inlinable
        public init(s3Bucket: String, s3BucketOwner: String? = nil, s3KeyPrefix: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3BucketOwner = s3BucketOwner
            self.s3KeyPrefix = s3KeyPrefix
        }

        public func validate(name: String) throws {
            try self.validate(self.s3Bucket, name: "s3Bucket", parent: name, max: 255)
            try self.validate(self.s3Bucket, name: "s3Bucket", parent: name, pattern: "^[a-z0-9A-Z]+[\\.\\-\\w]*[a-z0-9A-Z]+$")
            try self.validate(self.s3BucketOwner, name: "s3BucketOwner", parent: name, pattern: "^[0-9]{12}$")
            try self.validate(self.s3KeyPrefix, name: "s3KeyPrefix", parent: name, max: 1024)
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3BucketOwner = "S3BucketOwner"
            case s3KeyPrefix = "S3KeyPrefix"
        }
    }

    public struct SSEDescription: AWSDecodableShape {
        /// Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table's KMS key is accessible again. DynamoDB will initiate the table archival process when table's KMS key remains inaccessible for more than seven days from this date.
        public let inaccessibleEncryptionDateTime: Date?
        /// The KMS key ARN used for the KMS encryption.
        public let kmsMasterKeyArn: String?
        /// Server-side encryption type. The only supported value is:    KMS - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).
        public let sseType: SSEType?
        /// Represents the current state of server-side encryption. The only supported values are:    ENABLED - Server-side encryption is enabled.    UPDATING - Server-side encryption is being updated.
        public let status: SSEStatus?

        @inlinable
        public init(inaccessibleEncryptionDateTime: Date? = nil, kmsMasterKeyArn: String? = nil, sseType: SSEType? = nil, status: SSEStatus? = nil) {
            self.inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime
            self.kmsMasterKeyArn = kmsMasterKeyArn
            self.sseType = sseType
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case inaccessibleEncryptionDateTime = "InaccessibleEncryptionDateTime"
            case kmsMasterKeyArn = "KMSMasterKeyArn"
            case sseType = "SSEType"
            case status = "Status"
        }
    }

    public struct SSESpecification: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether server-side encryption is done using an Amazon Web Services managed key or an Amazon Web Services owned key. If enabled (true), server-side encryption type is set to KMS and an Amazon Web Services managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to Amazon Web Services owned key.
        public let enabled: Bool?
        /// The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key alias/aws/dynamodb.
        public let kmsMasterKeyId: String?
        /// Server-side encryption type. The only supported value is:    KMS - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).
        public let sseType: SSEType?

        @inlinable
        public init(enabled: Bool? = nil, kmsMasterKeyId: String? = nil, sseType: SSEType? = nil) {
            self.enabled = enabled
            self.kmsMasterKeyId = kmsMasterKeyId
            self.sseType = sseType
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case kmsMasterKeyId = "KMSMasterKeyId"
            case sseType = "SSEType"
        }
    }

    public struct ScanInput: AWSEncodableShape {
        /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide.
        public let attributesToGet: [String]?
        /// This is a legacy parameter. Use FilterExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// A Boolean value that determines the read consistency model during the scan:   If ConsistentRead is false, then the data returned from Scan might not contain the results from other recently completed write operations (PutItem, UpdateItem, or DeleteItem).   If ConsistentRead is true, then all of the write operations that completed before the Scan began are guaranteed to be contained in the Scan response.   The default setting for ConsistentRead is false. The ConsistentRead parameter is not supported on global secondary indexes. If you scan a global secondary index with ConsistentRead set to true, you will receive a ValidationException.
        public let consistentRead: Bool?
        /// The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation. The data type for ExclusiveStartKey must be String, Number or Binary. No set data types are allowed. In a parallel scan, a Scan request that includes ExclusiveStartKey must specify the same segment whose previous Scan returned the corresponding value of LastEvaluatedKey.
        public let exclusiveStartKey: [String: AttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A string that contains conditions that DynamoDB applies after the Scan operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned.  A FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.  For more information, see Filter Expressions in the Amazon DynamoDB Developer Guide.
        public let filterExpression: String?
        /// The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the IndexName parameter, you must also provide TableName.
        public let indexName: String?
        /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see Working with Queries in the Amazon DynamoDB Developer Guide.
        public let limit: Int?
        /// A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let projectionExpression: String?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// This is a legacy parameter. Use FilterExpression instead. For more information, see ScanFilter in the Amazon DynamoDB Developer Guide.
        public let scanFilter: [String: Condition]?
        /// For a parallel Scan request, Segment identifies an individual segment to be scanned by an application worker. Segment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a Segment value of 0, the second thread specifies 1, and so on. The value of LastEvaluatedKey returned from a parallel Scan request must be used as ExclusiveStartKey with the same segment ID in a subsequent Scan operation. The value for Segment must be greater than or equal to 0, and less than the value provided for TotalSegments. If you provide Segment, you must also provide TotalSegments.
        public let segment: Int?
        /// The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.    ALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.    ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES.    COUNT - Returns the number of matching items, rather than the matching items themselves. Note that this uses the same quantity of read capacity units as getting the items, and is subject to the same item size calculations.    SPECIFIC_ATTRIBUTES - Returns only the attributes listed in ProjectionExpression. This return value is equivalent to specifying ProjectionExpression without specifying any value for Select. If you query or scan a local secondary index and request only attributes that are projected into that index, the operation reads only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.   If neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select.)  If you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an error.
        public let select: Select?
        /// The name of the table containing the requested items or if you provide IndexName, the name of the table to which that index belongs. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String
        /// For a parallel Scan request, TotalSegments represents the total number of segments into which the Scan operation will be divided. The value of TotalSegments corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a TotalSegments value of 4. The value for TotalSegments must be greater than or equal to 1, and less than or equal to 1000000. If you specify a TotalSegments value of 1, the Scan operation will be sequential rather than parallel. If you specify TotalSegments, you must also specify Segment.
        public let totalSegments: Int?

        @inlinable
        public init(attributesToGet: [String]? = nil, conditionalOperator: ConditionalOperator? = nil, consistentRead: Bool? = nil, exclusiveStartKey: [String: AttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, filterExpression: String? = nil, indexName: String? = nil, limit: Int? = nil, projectionExpression: String? = nil, returnConsumedCapacity: ReturnConsumedCapacity? = nil, scanFilter: [String: Condition]? = nil, segment: Int? = nil, select: Select? = nil, tableName: String, totalSegments: Int? = nil) {
            self.attributesToGet = attributesToGet
            self.conditionalOperator = conditionalOperator
            self.consistentRead = consistentRead
            self.exclusiveStartKey = exclusiveStartKey
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.filterExpression = filterExpression
            self.indexName = indexName
            self.limit = limit
            self.projectionExpression = projectionExpression
            self.returnConsumedCapacity = returnConsumedCapacity
            self.scanFilter = scanFilter
            self.segment = segment
            self.select = select
            self.tableName = tableName
            self.totalSegments = totalSegments
        }

        public func validate(name: String) throws {
            try self.attributesToGet?.forEach {
                try validate($0, name: "attributesToGet[]", parent: name, max: 65535)
            }
            try self.validate(self.attributesToGet, name: "attributesToGet", parent: name, min: 1)
            try self.exclusiveStartKey?.forEach {
                try validate($0.key, name: "exclusiveStartKey.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).exclusiveStartKey[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.scanFilter?.forEach {
                try validate($0.key, name: "scanFilter.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).scanFilter[\"\($0.key)\"]")
            }
            try self.validate(self.segment, name: "segment", parent: name, max: 999999)
            try self.validate(self.segment, name: "segment", parent: name, min: 0)
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
            try self.validate(self.totalSegments, name: "totalSegments", parent: name, max: 1000000)
            try self.validate(self.totalSegments, name: "totalSegments", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case conditionalOperator = "ConditionalOperator"
            case consistentRead = "ConsistentRead"
            case exclusiveStartKey = "ExclusiveStartKey"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case filterExpression = "FilterExpression"
            case indexName = "IndexName"
            case limit = "Limit"
            case projectionExpression = "ProjectionExpression"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case scanFilter = "ScanFilter"
            case segment = "Segment"
            case select = "Select"
            case tableName = "TableName"
            case totalSegments = "TotalSegments"
        }
    }

    public struct ScanOutput: AWSDecodableShape {
        /// The capacity units consumed by the Scan operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Capacity unit consumption for read operations in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// The number of items in the response. If you set ScanFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied. If you did not use a filter in the request, then Count is the same as ScannedCount.
        public let count: Int?
        /// An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.
        public let items: [[String: AttributeValue]]?
        /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
        public let lastEvaluatedKey: [String: AttributeValue]?
        /// The number of items evaluated, before any ScanFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Scan operation. For more information, see Count and ScannedCount in the Amazon DynamoDB Developer Guide. If you did not use a filter in the request, then ScannedCount is the same as Count.
        public let scannedCount: Int?

        @inlinable
        public init(consumedCapacity: ConsumedCapacity? = nil, count: Int? = nil, items: [[String: AttributeValue]]? = nil, lastEvaluatedKey: [String: AttributeValue]? = nil, scannedCount: Int? = nil) {
            self.consumedCapacity = consumedCapacity
            self.count = count
            self.items = items
            self.lastEvaluatedKey = lastEvaluatedKey
            self.scannedCount = scannedCount
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case count = "Count"
            case items = "Items"
            case lastEvaluatedKey = "LastEvaluatedKey"
            case scannedCount = "ScannedCount"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
        public let key: String
        /// The value of the tag. Tag values are case-sensitive and can be null.
        public let value: String

        @inlinable
        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceInput: AWSEncodableShape {
        /// Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).
        public let resourceArn: String
        /// The tags to be assigned to the Amazon DynamoDB resource.
        public let tags: [Tag]

        @inlinable
        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1283)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct TimeToLiveDescription: AWSDecodableShape {
        ///  The name of the TTL attribute for items in the table.
        public let attributeName: String?
        ///  The TTL status for the table.
        public let timeToLiveStatus: TimeToLiveStatus?

        @inlinable
        public init(attributeName: String? = nil, timeToLiveStatus: TimeToLiveStatus? = nil) {
            self.attributeName = attributeName
            self.timeToLiveStatus = timeToLiveStatus
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case timeToLiveStatus = "TimeToLiveStatus"
        }
    }

    public struct TimeToLiveSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The name of the TTL attribute used to store the expiration time for items in the table.
        public let attributeName: String
        /// Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
        public let enabled: Bool

        @inlinable
        public init(attributeName: String, enabled: Bool) {
            self.attributeName = attributeName
            self.enabled = enabled
        }

        public func validate(name: String) throws {
            try self.validate(self.attributeName, name: "attributeName", parent: name, max: 255)
            try self.validate(self.attributeName, name: "attributeName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case enabled = "Enabled"
        }
    }

    public struct TransactGetItem: AWSEncodableShape {
        /// Contains the primary key that identifies the item to get, together with the name of the table that contains the item, and optionally the specific attributes of the item to retrieve.
        public let get: Get

        @inlinable
        public init(get: Get) {
            self.get = get
        }

        public func validate(name: String) throws {
            try self.get.validate(name: "\(name).get")
        }

        private enum CodingKeys: String, CodingKey {
            case get = "Get"
        }
    }

    public struct TransactGetItemsInput: AWSEncodableShape {
        /// A value of TOTAL causes consumed capacity information to be returned, and a value of NONE prevents that information from being returned. No other value is valid.
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// An ordered array of up to 100 TransactGetItem objects, each of which contains a Get structure.
        public let transactItems: [TransactGetItem]

        @inlinable
        public init(returnConsumedCapacity: ReturnConsumedCapacity? = nil, transactItems: [TransactGetItem]) {
            self.returnConsumedCapacity = returnConsumedCapacity
            self.transactItems = transactItems
        }

        public func validate(name: String) throws {
            try self.transactItems.forEach {
                try $0.validate(name: "\(name).transactItems[]")
            }
            try self.validate(self.transactItems, name: "transactItems", parent: name, max: 100)
            try self.validate(self.transactItems, name: "transactItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case transactItems = "TransactItems"
        }
    }

    public struct TransactGetItemsOutput: AWSDecodableShape {
        /// If the ReturnConsumedCapacity value was TOTAL, this is an array of ConsumedCapacity objects, one for each table addressed by TransactGetItem objects in the TransactItems parameter. These ConsumedCapacity objects report the read-capacity units consumed by the TransactGetItems call in that table.
        public let consumedCapacity: [ConsumedCapacity]?
        /// An ordered array of up to 100 ItemResponse objects, each of which corresponds to the TransactGetItem object in the same position in the TransactItems array. Each ItemResponse object contains a Map of the name-value pairs that are the projected attributes of the requested item. If a requested item could not be retrieved, the corresponding ItemResponse object is Null, or if the requested item has no projected attributes, the corresponding ItemResponse object is an empty Map.
        public let responses: [ItemResponse]?

        @inlinable
        public init(consumedCapacity: [ConsumedCapacity]? = nil, responses: [ItemResponse]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case responses = "Responses"
        }
    }

    public struct TransactWriteItemsInput: AWSEncodableShape {
        /// Providing a ClientRequestToken makes the call to TransactWriteItems idempotent, meaning that multiple identical calls have the same effect as one single call. Although multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the ReturnConsumedCapacity parameter is set, then the initial TransactWriteItems call returns the amount of write capacity units consumed in making the changes. Subsequent TransactWriteItems calls with the same client token return the number of read capacity units consumed in reading the item. A client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.
        public let clientRequestToken: String?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
        /// An ordered array of up to 100 TransactWriteItem objects, each of which contains a ConditionCheck, Put, Update, or Delete object. These can operate on items in different tables, but the tables must reside in the same Amazon Web Services account and Region, and no two of them can operate on the same item.
        public let transactItems: [TransactWriteItem]

        @inlinable
        public init(clientRequestToken: String? = TransactWriteItemsInput.idempotencyToken(), returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil, transactItems: [TransactWriteItem]) {
            self.clientRequestToken = clientRequestToken
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
            self.transactItems = transactItems
        }

        public func validate(name: String) throws {
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 36)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 1)
            try self.transactItems.forEach {
                try $0.validate(name: "\(name).transactItems[]")
            }
            try self.validate(self.transactItems, name: "transactItems", parent: name, max: 100)
            try self.validate(self.transactItems, name: "transactItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
            case transactItems = "TransactItems"
        }
    }

    public struct TransactWriteItemsOutput: AWSDecodableShape {
        /// The capacity units consumed by the entire TransactWriteItems operation. The values of the list are ordered according to the ordering of the TransactItems request parameter.
        public let consumedCapacity: [ConsumedCapacity]?
        /// A list of tables that were processed by TransactWriteItems and, for each table, information about any item collections that were affected by individual UpdateItem, PutItem, or DeleteItem operations.
        public let itemCollectionMetrics: [String: [ItemCollectionMetrics]]?

        @inlinable
        public init(consumedCapacity: [ConsumedCapacity]? = nil, itemCollectionMetrics: [String: [ItemCollectionMetrics]]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
        }
    }

    public struct Update: AWSEncodableShape {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public let conditionExpression: String?
        /// One or more substitution tokens for attribute names in an expression.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.
        public let key: [String: AttributeValue]
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Update condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// Name of the table for the UpdateItem request. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String
        /// An expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.
        public let updateExpression: String

        @inlinable
        public init(conditionExpression: String? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String, updateExpression: String) {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
            self.updateExpression = updateExpression
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case conditionExpression = "ConditionExpression"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
            case updateExpression = "UpdateExpression"
        }
    }

    public struct UpdateItemInput: AWSEncodableShape {
        /// This is a legacy parameter. Use UpdateExpression instead. For more information, see AttributeUpdates in the Amazon DynamoDB Developer Guide.
        public let attributeUpdates: [String: AttributeValueUpdate]?
        /// This is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// A condition that must be satisfied in order for a conditional update to succeed. An expression can contain any of the following:   Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size  These function names are case-sensitive.   Comparison operators: = | <> | | = | BETWEEN | IN     Logical operators: AND | OR | NOT    For more information about condition expressions, see Specifying Conditions in the Amazon DynamoDB Developer Guide.
        public let conditionExpression: String?
        /// This is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide.
        public let expected: [String: ExpectedAttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide.) To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information about expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
        public let key: [String: AttributeValue]
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
        /// Use ReturnValues if you want to get the item attributes as they appear before or after they are successfully updated. For UpdateItem, the valid values are:    NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)    ALL_OLD - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.    UPDATED_OLD - Returns only the updated attributes, as they appeared before the UpdateItem operation.    ALL_NEW - Returns all of the attributes of the item, as they appear after the UpdateItem operation.    UPDATED_NEW - Returns only the updated attributes, as they appear after the UpdateItem operation.   There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.
        public let returnValues: ReturnValue?
        /// An optional parameter that returns the item attributes for an UpdateItem operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// The name of the table containing the item to update. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String
        /// An expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them. The following action values are available for UpdateExpression.    SET - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use SET to add or subtract from an attribute that is of type Number. For example: SET myNum = myNum + :val   SET supports the following functions:    if_not_exists (path, operand) - if the item does not contain an attribute at the specified path, then if_not_exists evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.    list_append (operand, operand) - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.   These function names are case-sensitive.    REMOVE - Removes one or more attributes from an item.    ADD - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:   If the existing attribute is a number, and if Value is also a number, then Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute.  If you use ADD to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. Similarly, if you use ADD for an existing item to increment or decrement an attribute value that doesn't exist before the update, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update doesn't have an attribute named itemcount, but you decide to ADD the number 3 to this attribute anyway. DynamoDB will create the itemcount attribute, set its initial value to 0, and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3.    If the existing data type is a set and if Value is also a set, then Value is added to the existing set. For example, if the attribute value is the set [1,2], and the ADD action specified [3], then the final attribute value is [1,2,3]. An error occurs if an ADD action is specified for a set attribute and the attribute type specified does not match the existing set type.  Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings.    The ADD action only supports Number and set data types. In addition, ADD can only be used on top-level attributes, not nested attributes.     DELETE - Deletes an element from a set. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specifies [a,c], then the final attribute value is [b]. Specifying an empty set is an error.  The DELETE action only supports set data types. In addition, DELETE can only be used on top-level attributes, not nested attributes.    You can have many actions in a single expression, such as the following: SET a=:value1, b=:value2 DELETE :value3, :value4, :value5  For more information on update expressions, see Modifying Items and Attributes in the Amazon DynamoDB Developer Guide.
        public let updateExpression: String?

        @inlinable
        public init(attributeUpdates: [String: AttributeValueUpdate]? = nil, conditionalOperator: ConditionalOperator? = nil, conditionExpression: String? = nil, expected: [String: ExpectedAttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil, returnValues: ReturnValue? = nil, returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String, updateExpression: String? = nil) {
            self.attributeUpdates = attributeUpdates
            self.conditionalOperator = conditionalOperator
            self.conditionExpression = conditionExpression
            self.expected = expected
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
            self.returnValues = returnValues
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
            self.updateExpression = updateExpression
        }

        public func validate(name: String) throws {
            try self.attributeUpdates?.forEach {
                try validate($0.key, name: "attributeUpdates.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).attributeUpdates[\"\($0.key)\"]")
            }
            try self.expected?.forEach {
                try validate($0.key, name: "expected.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).expected[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeUpdates = "AttributeUpdates"
            case conditionalOperator = "ConditionalOperator"
            case conditionExpression = "ConditionExpression"
            case expected = "Expected"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
            case returnValues = "ReturnValues"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
            case updateExpression = "UpdateExpression"
        }
    }

    public struct UpdateItemOutput: AWSDecodableShape {
        /// A map of attribute values as they appear before or after the UpdateItem operation, as determined by the ReturnValues parameter. The Attributes map is only present if the update was successful and ReturnValues was specified as something other than NONE in the request. Each element represents one attribute.
        public let attributes: [String: AttributeValue]?
        /// The capacity units consumed by the UpdateItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Capacity unity consumption for write operations in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// Information about item collections, if any, that were affected by the UpdateItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:    ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.    SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let itemCollectionMetrics: ItemCollectionMetrics?

        @inlinable
        public init(attributes: [String: AttributeValue]? = nil, consumedCapacity: ConsumedCapacity? = nil, itemCollectionMetrics: ItemCollectionMetrics? = nil) {
            self.attributes = attributes
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
        }
    }

    public struct UpdateTimeToLiveInput: AWSEncodableShape {
        /// The name of the table to be configured. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        public let tableName: String
        /// Represents the settings used to enable or disable Time to Live for the specified table.
        public let timeToLiveSpecification: TimeToLiveSpecification

        @inlinable
        public init(tableName: String, timeToLiveSpecification: TimeToLiveSpecification) {
            self.tableName = tableName
            self.timeToLiveSpecification = timeToLiveSpecification
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 1024)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 1)
            try self.timeToLiveSpecification.validate(name: "\(name).timeToLiveSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
            case timeToLiveSpecification = "TimeToLiveSpecification"
        }
    }

    public struct UpdateTimeToLiveOutput: AWSDecodableShape {
        /// Represents the output of an UpdateTimeToLive operation.
        public let timeToLiveSpecification: TimeToLiveSpecification?

        @inlinable
        public init(timeToLiveSpecification: TimeToLiveSpecification? = nil) {
            self.timeToLiveSpecification = timeToLiveSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case timeToLiveSpecification = "TimeToLiveSpecification"
        }
    }

    public struct WarmThroughput: AWSEncodableShape & AWSDecodableShape {
        /// Represents the number of read operations your base table can instantaneously support.
        public let readUnitsPerSecond: Int64?
        /// Represents the number of write operations your base table can instantaneously support.
        public let writeUnitsPerSecond: Int64?

        @inlinable
        public init(readUnitsPerSecond: Int64? = nil, writeUnitsPerSecond: Int64? = nil) {
            self.readUnitsPerSecond = readUnitsPerSecond
            self.writeUnitsPerSecond = writeUnitsPerSecond
        }

        private enum CodingKeys: String, CodingKey {
            case readUnitsPerSecond = "ReadUnitsPerSecond"
            case writeUnitsPerSecond = "WriteUnitsPerSecond"
        }
    }

    public struct WriteRequest: AWSEncodableShape & AWSDecodableShape {
        /// A request to perform a DeleteItem operation.
        public let deleteRequest: DeleteRequest?
        /// A request to perform a PutItem operation.
        public let putRequest: PutRequest?

        @inlinable
        public init(deleteRequest: DeleteRequest? = nil, putRequest: PutRequest? = nil) {
            self.deleteRequest = deleteRequest
            self.putRequest = putRequest
        }

        public func validate(name: String) throws {
            try self.deleteRequest?.validate(name: "\(name).deleteRequest")
            try self.putRequest?.validate(name: "\(name).putRequest")
        }

        private enum CodingKeys: String, CodingKey {
            case deleteRequest = "DeleteRequest"
            case putRequest = "PutRequest"
        }
    }
}

// MARK: - Errors

/// Error enum for DynamoDB
public struct DynamoDBErrorType: AWSErrorType {
    enum Code: String {
        case backupInUseException = "BackupInUseException"
        case backupNotFoundException = "BackupNotFoundException"
        case conditionalCheckFailedException = "ConditionalCheckFailedException"
        case continuousBackupsUnavailableException = "ContinuousBackupsUnavailableException"
        case duplicateItemException = "DuplicateItemException"
        case exportConflictException = "ExportConflictException"
        case exportNotFoundException = "ExportNotFoundException"
        case globalTableAlreadyExistsException = "GlobalTableAlreadyExistsException"
        case globalTableNotFoundException = "GlobalTableNotFoundException"
        case idempotentParameterMismatchException = "IdempotentParameterMismatchException"
        case importConflictException = "ImportConflictException"
        case importNotFoundException = "ImportNotFoundException"
        case indexNotFoundException = "IndexNotFoundException"
        case internalServerError = "InternalServerError"
        case invalidEndpointException = "InvalidEndpointException"
        case invalidExportTimeException = "InvalidExportTimeException"
        case invalidRestoreTimeException = "InvalidRestoreTimeException"
        case itemCollectionSizeLimitExceededException = "ItemCollectionSizeLimitExceededException"
        case limitExceededException = "LimitExceededException"
        case pointInTimeRecoveryUnavailableException = "PointInTimeRecoveryUnavailableException"
        case policyNotFoundException = "PolicyNotFoundException"
        case provisionedThroughputExceededException = "ProvisionedThroughputExceededException"
        case replicaAlreadyExistsException = "ReplicaAlreadyExistsException"
        case replicaNotFoundException = "ReplicaNotFoundException"
        case replicatedWriteConflictException = "ReplicatedWriteConflictException"
        case requestLimitExceeded = "RequestLimitExceeded"
        case resourceInUseException = "ResourceInUseException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case tableAlreadyExistsException = "TableAlreadyExistsException"
        case tableInUseException = "TableInUseException"
        case tableNotFoundException = "TableNotFoundException"
        case transactionCanceledException = "TransactionCanceledException"
        case transactionConflictException = "TransactionConflictException"
        case transactionInProgressException = "TransactionInProgressException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize DynamoDB
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// There is another ongoing conflicting backup control plane operation on the table. The backup is either being created, deleted or restored to a table.
    public static var backupInUseException: Self { .init(.backupInUseException) }
    /// Backup not found for the given BackupARN.
    public static var backupNotFoundException: Self { .init(.backupNotFoundException) }
    /// A condition specified in the operation could not be evaluated.
    public static var conditionalCheckFailedException: Self { .init(.conditionalCheckFailedException) }
    /// Backups have not yet been enabled for this table.
    public static var continuousBackupsUnavailableException: Self { .init(.continuousBackupsUnavailableException) }
    ///  There was an attempt to insert an item with the same primary key as an item that already exists in the DynamoDB table.
    public static var duplicateItemException: Self { .init(.duplicateItemException) }
    /// There was a conflict when writing to the specified S3 bucket.
    public static var exportConflictException: Self { .init(.exportConflictException) }
    /// The specified export was not found.
    public static var exportNotFoundException: Self { .init(.exportNotFoundException) }
    /// The specified global table already exists.
    public static var globalTableAlreadyExistsException: Self { .init(.globalTableAlreadyExistsException) }
    /// The specified global table does not exist.
    public static var globalTableNotFoundException: Self { .init(.globalTableNotFoundException) }
    /// DynamoDB rejected the request because you retried a request with a different payload but with an idempotent token that was already used.
    public static var idempotentParameterMismatchException: Self { .init(.idempotentParameterMismatchException) }
    ///  There was a conflict when importing from the specified S3 source.  This can occur when the current import conflicts with a previous import request  that had the same client token.
    public static var importConflictException: Self { .init(.importConflictException) }
    ///  The specified import was not found.
    public static var importNotFoundException: Self { .init(.importNotFoundException) }
    /// The operation tried to access a nonexistent index.
    public static var indexNotFoundException: Self { .init(.indexNotFoundException) }
    /// An error occurred on the server side.
    public static var internalServerError: Self { .init(.internalServerError) }
    public static var invalidEndpointException: Self { .init(.invalidEndpointException) }
    /// The specified ExportTime is outside of the point in time recovery window.
    public static var invalidExportTimeException: Self { .init(.invalidExportTimeException) }
    /// An invalid restore time was specified. RestoreDateTime must be between EarliestRestorableDateTime and LatestRestorableDateTime.
    public static var invalidRestoreTimeException: Self { .init(.invalidRestoreTimeException) }
    /// An item collection is too large. This exception is only returned for tables that have one or more local secondary indexes.
    public static var itemCollectionSizeLimitExceededException: Self { .init(.itemCollectionSizeLimitExceededException) }
    /// There is no limit to the number of daily on-demand backups that can be taken.  For most purposes, up to 500 simultaneous table operations are allowed per account. These operations include CreateTable, UpdateTable, DeleteTable,UpdateTimeToLive, RestoreTableFromBackup, and RestoreTableToPointInTime.  When you are creating a table with one or more secondary indexes, you can have up to 250 such requests running at a time. However, if the table or index specifications are complex, then DynamoDB might temporarily reduce the number of concurrent operations. When importing into DynamoDB, up to 50 simultaneous import table operations are allowed per account. There is a soft account quota of 2,500 tables. GetRecords was called with a value of more than 1000 for the limit request parameter. More than 2 processes are reading from the same streams shard at the same time. Exceeding this limit may result in request throttling.
    public static var limitExceededException: Self { .init(.limitExceededException) }
    /// Point in time recovery has not yet been enabled for this source table.
    public static var pointInTimeRecoveryUnavailableException: Self { .init(.pointInTimeRecoveryUnavailableException) }
    /// The operation tried to access a nonexistent resource-based policy. If you specified an ExpectedRevisionId, it's possible that a policy is present for the resource but its revision ID didn't match the expected value.
    public static var policyNotFoundException: Self { .init(.policyNotFoundException) }
    /// Your request rate is too high. The Amazon Web Services SDKs for DynamoDB automatically retry requests that receive this exception. Your request is eventually successful, unless your retry queue is too large to finish. Reduce the frequency of requests and use exponential backoff. For more information, go to Error Retries and Exponential Backoff in the Amazon DynamoDB Developer Guide.
    public static var provisionedThroughputExceededException: Self { .init(.provisionedThroughputExceededException) }
    /// The specified replica is already part of the global table.
    public static var replicaAlreadyExistsException: Self { .init(.replicaAlreadyExistsException) }
    /// The specified replica is no longer part of the global table.
    public static var replicaNotFoundException: Self { .init(.replicaNotFoundException) }
    /// The request was rejected because one or more items in the request are being modified by a request in another Region.
    public static var replicatedWriteConflictException: Self { .init(.replicatedWriteConflictException) }
    /// Throughput exceeds the current throughput quota for your account. Please contact Amazon Web Services Support to request a quota increase.
    public static var requestLimitExceeded: Self { .init(.requestLimitExceeded) }
    /// The operation conflicts with the resource's availability. For example:   You attempted to recreate an existing table.   You tried to delete a table currently in the CREATING state.   You tried to update a resource that was already being updated.   When appropriate, wait for the ongoing update to complete and attempt the request again.
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    /// The operation tried to access a nonexistent table or index. The resource might not be specified correctly, or its status might not be ACTIVE.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// A target table with the specified name already exists.
    public static var tableAlreadyExistsException: Self { .init(.tableAlreadyExistsException) }
    /// A target table with the specified name is either being created or deleted.
    public static var tableInUseException: Self { .init(.tableInUseException) }
    /// A source table with the name TableName does not currently exist within the subscriber's account or the subscriber is operating in the wrong Amazon Web Services Region.
    public static var tableNotFoundException: Self { .init(.tableNotFoundException) }
    /// The entire transaction request was canceled. DynamoDB cancels a TransactWriteItems request under the following circumstances:   A condition in one of the condition expressions is not met.   A table in the TransactWriteItems request is in a different account or region.   More than one action in the TransactWriteItems operation targets the same item.   There is insufficient provisioned capacity for the transaction to be completed.   An item size becomes too large (larger than 400 KB), or a local secondary index (LSI) becomes too large, or a similar validation error occurs because of changes made by the transaction.   There is a user error, such as an invalid data format.    There is an ongoing TransactWriteItems operation that conflicts with a concurrent  TransactWriteItems request. In this case the TransactWriteItems operation  fails with a TransactionCanceledException.    DynamoDB cancels a TransactGetItems request under the following circumstances:   There is an ongoing TransactGetItems operation that conflicts with a concurrent PutItem, UpdateItem, DeleteItem or TransactWriteItems request. In this case the TransactGetItems operation fails with a TransactionCanceledException.   A table in the TransactGetItems request is in a different account or region.   There is insufficient provisioned capacity for the transaction to be completed.   There is a user error, such as an invalid data format.    If using Java, DynamoDB lists the cancellation reasons on the CancellationReasons property. This property is not set for other languages. Transaction cancellation reasons are ordered in the order of requested items, if an item has no error it will have None code and Null message.  Cancellation reason codes and possible error messages:   No Errors:   Code: None    Message: null      Conditional Check Failed:   Code: ConditionalCheckFailed    Message: The conditional request failed.      Item Collection Size Limit Exceeded:   Code: ItemCollectionSizeLimitExceeded    Message: Collection size exceeded.     Transaction Conflict:   Code: TransactionConflict    Message: Transaction is ongoing for the item.     Provisioned Throughput Exceeded:   Code: ProvisionedThroughputExceeded    Messages:   The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API.  This Message is received when provisioned throughput is exceeded is on a provisioned DynamoDB table.    The level of configured provisioned throughput for one or more global secondary indexes of the table was exceeded. Consider increasing your provisioning level for the under-provisioned global secondary indexes with the UpdateTable API.  This message is returned when provisioned throughput is exceeded is on a provisioned GSI.        Throttling Error:   Code: ThrottlingError    Messages:    Throughput exceeds the current capacity of your table or index. DynamoDB is automatically scaling your table or index so please try again shortly. If exceptions persist, check if you have a hot key: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html.  This message is returned when writes get throttled on an On-Demand table as DynamoDB is automatically scaling the table.    Throughput exceeds the current capacity for one or more global secondary indexes. DynamoDB is automatically scaling your index so please try again shortly.  This message is returned when writes get throttled on an On-Demand GSI as DynamoDB is automatically scaling the GSI.        Validation Error:   Code: ValidationError    Messages:    One or more parameter values were invalid.   The update expression attempted to update the secondary index key beyond allowed size limits.   The update expression attempted to update the secondary index key to unsupported type.   An operand in the update expression has an incorrect data type.   Item size to update has exceeded the maximum allowed size.   Number overflow. Attempting to store a number with magnitude larger than supported range.   Type mismatch for attribute to update.   Nesting Levels have exceeded supported limits.   The document path provided in the update expression is invalid for update.   The provided expression refers to an attribute that does not exist in the item.
    public static var transactionCanceledException: Self { .init(.transactionCanceledException) }
    /// Operation was rejected because there is an ongoing transaction for the item.
    public static var transactionConflictException: Self { .init(.transactionConflictException) }
    /// The transaction with the given request token is already in progress.  Recommended Settings                This is a general recommendation for handling the TransactionInProgressException. These settings help  ensure that the client retries will trigger completion of the ongoing TransactWriteItems request.      Set clientExecutionTimeout to a value that allows at least one retry to be processed after 5  seconds have elapsed since the first attempt for the TransactWriteItems operation.     Set socketTimeout to a value a little lower than the requestTimeout setting.     requestTimeout should be set based on the time taken for the individual retries of a single  HTTP request for your use case, but setting it to 1 second or higher should work well to reduce chances of  retries and TransactionInProgressException errors.     Use exponential backoff when retrying and tune backoff if needed.     Assuming default retry policy,  example timeout settings based on the guidelines above are as follows:              Example timeline:   0-1000 first attempt   1000-1500 first sleep/delay (default retry policy uses 500 ms as base delay for 4xx errors)   1500-2500 second attempt   2500-3500 second sleep/delay (500 * 2, exponential backoff)   3500-4500 third attempt   4500-6500 third sleep/delay (500 * 2^2)   6500-7500 fourth attempt (this can trigger inline recovery since 5 seconds have elapsed since the first attempt reached TC)
    public static var transactionInProgressException: Self { .init(.transactionInProgressException) }
}

extension DynamoDBErrorType: Equatable {
    public static func == (lhs: DynamoDBErrorType, rhs: DynamoDBErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension DynamoDBErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}

extension DynamoDB.AttributeValue: Equatable {
    public static func == (lhs: Self, rhs: Self) -> Bool {
        switch (lhs, rhs) {
        case (.b(let lhs), .b(let rhs)):
            return lhs == rhs
        case (.bool(let lhs), .bool(let rhs)):
            return lhs == rhs
        case (.bs(let lhs), .bs(let rhs)):
            return lhs == rhs
        case (.l(let lhs), .l(let rhs)):
            return lhs == rhs
        case (.m(let lhs), .m(let rhs)):
            return lhs == rhs
        case (.n(let lhs), .n(let rhs)):
            return lhs == rhs
        case (.ns(let lhs), .ns(let rhs)):
            return lhs == rhs
        case (.null(let lhs), .null(let rhs)):
            return lhs == rhs
        case (.s(let lhs), .s(let rhs)):
            return lhs == rhs
        case (.ss(let lhs), .ss(let rhs)):
            return lhs == rhs
        default:
            return false
        }
    }
}
